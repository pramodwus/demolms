
package com.qbis.common;
/**
 * @author Vikram Malik
 * @version 1.0
 */
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

import com.qbis.common.QueryManager.QueryStrings;

public class QueryManager {

	public enum QueryStrings{
		GET_COURSE_DETAILS_FOR_ATTEMPT("SELECT course_manager.course_id, course_manager.title, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags, difficulty_level.level_name, language_content.language_name, DATE_FORMAT(course_manager.modified_date,'%d-%m-%Y') AS modified_date, DATE_FORMAT(course_manager.modified_date,'%H:%i:%s') AS modified_date, course_manager.level_id, course_manager.language_id,course_manager.is_active,course_manager.published,course_manager.sub_title,course_manager.is_scheduled, course_manager.schedule_publish_date, course_manager.course_type, course_manager.scorm_root_path FROM course_manager INNER JOIN difficulty_level ON course_manager.level_id=difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id=language_content.language_id WHERE course_id=? AND published=?"),
		GET_SECTIONLIST_FOR_ATTEMPT("SELECT course_section_manager.section_id, course_section_manager.section_name, course_section_manager.quiz_mandatory, course_section_manager.passing_criteria, course_section_manager.min_time_spent FROM course_section_manager INNER JOIN course_manager ON course_manager.course_id = course_section_manager.course_id WHERE course_manager.course_id = ? AND course_section_manager.is_practice = ? ORDER BY course_section_manager.section_id ASC "),
		GET_SECTIONLIST_FOR_ATTEMPT_BY_ID("SELECT course_section_manager.section_id, course_section_manager.section_name, course_section_manager.quiz_mandatory, course_section_manager.passing_criteria, course_section_manager.min_time_spent FROM course_section_manager INNER JOIN course_manager ON course_manager.course_id = course_section_manager.course_id WHERE course_manager.course_id = ? AND course_section_manager.section_id = 1 AND course_section_manager.is_practice = ? ORDER BY course_section_manager.section_id ASC "),
		GET_COURSE_CONTENT_LIST_FOR_ATTEMPT("SELECT course_content_manager.content_id, course_content_manager.content_name, course_content_manager.content_type_id, content_type.type_name,course_content_manager.content FROM course_content_manager INNER JOIN content_section_mapping  ON content_section_mapping.content_id=course_content_manager.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id WHERE content_section_mapping.section_id = ? AND (ISNULL(content_section_mapping.attempt_id) OR content_section_mapping.attempt_id = ?) ORDER BY course_content_manager.content_order ASC"),
		GET_COURSE_CONTENT_LIST_FOR_ATTEMPT_WITH_SESSION("SELECT course_content_manager.content_id, course_content_manager.content_name, course_content_manager.content_type_id, content_type.type_name,course_content_manager.content,content_section_mapping.attempt_id FROM course_content_manager INNER JOIN content_section_mapping  ON content_section_mapping.content_id=course_content_manager.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id WHERE content_section_mapping.section_id = ? AND content_section_mapping.session_id = ? AND (ISNULL(content_section_mapping.attempt_id) OR content_section_mapping.attempt_id = 1 OR content_section_mapping.attempt_id = 2) ORDER BY content_section_mapping.attempt_id ASC"),
		//GET_COURSE_CONTENT_FOR_ATTEMPT_WITH_SESSION("SELECT course_content_manager.content_id, course_content_manager.content_name, course_content_manager.content_type_id, content_type.type_name,course_content_manager.content FROM course_content_manager INNER JOIN content_section_mapping  ON content_section_mapping.content_id=course_content_manager.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id WHERE content_section_mapping.section_id = ? AND content_section_mapping.session_id = ? AND (ISNULL(content_section_mapping.attempt_id) OR content_section_mapping.attempt_id = ?) AND content_section_mapping.content_id = ? ORDER BY course_content_manager.content_order ASC"),
		GET_COURSE_CONTENT_FOR_ATTEMPT_WITH_SESSION("SELECT course_content_manager.content_id, course_content_manager.content_name, course_content_manager.content_type_id, content_type.type_name,course_content_manager.content,course_content_manager.streaming_url FROM course_content_manager INNER JOIN content_section_mapping  ON content_section_mapping.content_id=course_content_manager.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id WHERE content_section_mapping.section_id = ? AND content_section_mapping.session_id = ? AND (ISNULL(content_section_mapping.attempt_id) OR content_section_mapping.attempt_id = ?) AND content_section_mapping.content_id = ? ORDER BY course_content_manager.content_order ASC"),
		GET_COURSE_CONTENT_LIST_FOR_PRACTICE("SELECT course_content_manager.content_id, course_content_manager.content_name, course_content_manager.content_type_id, content_type.type_name FROM course_content_manager INNER JOIN content_section_mapping  ON content_section_mapping.content_id=course_content_manager.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id INNER JOIN course_section_manager ON content_section_mapping.section_id = course_section_manager.section_id WHERE course_section_manager.parent_id = ?  AND ISNULL(content_section_mapping.attempt_id) ORDER BY course_content_manager.content_order ASC"),
		GET_COURSE_SESSION_LIST("SELECT course_session_manager.id, course_session_manager.session_name,course_session_manager.is_free FROM course_session_manager WHERE course_session_manager.section_id = ?"),
		CHECK_TEST_SUBMITTED("SELECT user_test_attempt.pk FROM  user_test_attempt WHERE user_test_attempt.pk = ? AND user_test_attempt.ststus = ?"),
		INSERT_COURSE_CONTENT_VIEW_ACTIVITY("INSERT INTO activity_user_course_content_view(user_id, course_id, section_id, attempt_id, session_id, content_id, test_attempt_id, total_view, view_datetime) VALUES(?, ?, ?, ?, ?, ?, ?, ?, NOW())"),
		FIND_COURSE_CONTENT_VIEW_ACTIVITY("SELECT a_c_v.id, a_c_v.test_attempt_id, a_c_v.total_view FROM activity_user_course_content_view AS a_c_v WHERE a_c_v.user_id = ? AND a_c_v.course_id = ? AND a_c_v.section_id = ? AND a_c_v.attempt_id = ? AND a_c_v.session_id = ? AND a_c_v.content_id = ?"),
		FIND_COURSE_CONTENT_VIEW_BY_ID("SELECT a_c_v.id, a_c_v.test_attempt_id, a_c_v.total_view, a_c_v.content_id, a_c_v.session_id FROM activity_user_course_content_view AS a_c_v WHERE a_c_v.user_id = ? AND a_c_v.id = ?"),
		UPDATE_COURSE_CONTENT_VIEW_ACTIVITY("UPDATE activity_user_course_content_view AS a_c_v SET a_c_v.total_view = ? WHERE a_c_v.id = ?"),
		USER_VALIDATE_LOGIN("SELECT user_id FROM qbis_users where user_email=? AND user_pwd=PASSWORD(?) AND qbis_users.org_id=?"),
	    SUPER_USER_DETAIL_BASED_ON_ORG_ID("select qbis_users.user_id, qbis_users.user_email, qbis_organization.org_subdomain FROM qbis_users INNER JOIN qbis_organization ON qbis_users.org_id = qbis_organization.org_id WHERE qbis_users.permissionId = ? AND qbis_users.org_id = ?"),
	    // FIND_ONE_USER("SELECT qbis_users.user_id,qbis_users.user_email,qbis_users.role_id,role_description.role_desc ,qbis_users.status,qbis_users.org_id,qbis_users.first_name, qbis_users.last_name, qbis_users.user_name,qbis_users.access_id,qbis_users.profile_img,qbis_users.permissionId FROM qbis_users INNER JOIN role_description ON qbis_users.role_id=role_description.role_id WHERE user_email = ?"),
	    //not in use
	    FIND_ONE_USER("SELECT qbis_users.user_id,qbis_users.user_email,qbis_users.permissionId,roles.roleName ,qbis_users.status,qbis_users.org_id,qbis_users.first_name, qbis_users.last_name, qbis_users.user_name,qbis_users.access_id,qbis_users.profile_img,qbis_users.permissionId,qbis_users.created_by,qbis_users.system_language FROM qbis_users LEFT JOIN roles ON qbis_users.permissionId = roles.roleId WHERE user_email = ?"),
	    FIND_ONE_USER_DATA_BASED_EMAIL_ID("SELECT qbis_users.user_id,qbis_users.user_email,qbis_users.permissionId,roles.roleName ,qbis_users.status,qbis_users.org_id,qbis_users.first_name, qbis_users.last_name, qbis_users.user_name,qbis_users.access_id,qbis_users.profile_img,qbis_users.permissionId,qbis_users.created_by,qbis_users.system_language ,qbis_users.city,qbis_users.mobile,qbis_users.school_name,qbis_users.class,qbis_organization.org_subdomain,qbis_users.profile_img FROM qbis_users LEFT JOIN roles ON qbis_users.permissionId = roles.roleId LEFT JOIN qbis_organization ON qbis_organization.org_id = qbis_users.org_id WHERE qbis_users.user_email = ?"),
	    FIND_ONE_USER_BY_ID("SELECT qbis_users.user_id,qbis_users.user_email,qbis_users.permissionId,roles.roleName,qbis_users.status,qbis_users.org_id,qbis_users.first_name, qbis_users.last_name, qbis_users.user_name,qbis_users.access_id,qbis_users.profile_img,qbis_users.permissionId,qbis_users.created_by FROM qbis_users LEFT JOIN roles ON qbis_users.permissionId = roles.roleId WHERE user_id = ?"),
	    TEST_LIST_BY_USER_ID("SELECT qbis_test.test_id,DATE_FORMAT(qbis_test.created_date,'%d-%m-%Y') AS created_date,qbis_test.test_title,qbis_test.tags,count(user_test_attempt.user_id) AS total_appear, MAX(user_test_attempt.obtain_marks) AS max_mark, MIN(user_test_attempt.obtain_marks) AS min_mark,ROUND(AVG(user_test_attempt.obtain_marks),2) AS avg_mark ,qbis_test.is_public,qbis_test.published FROM qbis_test LEFT JOIN  user_test_attempt ON qbis_test.test_id=user_test_attempt.test_id WHERE qbis_test.user_id=? GROUP BY qbis_test.test_id ORDER BY qbis_test.test_id DESC"),
	    //ALL_TEST_LIST_BY_USER_ID("SELECT qbis_test.test_id,DATE_FORMAT(qbis_test.created_date,'%d-%m-%Y') AS created_date,qbis_test.test_title,qbis_test.tags,count(user_test_attempt.user_id) AS total_appear, MAX(user_test_attempt.obtain_marks) AS max_mark, MIN(user_test_attempt.obtain_marks) AS min_mark,ROUND(AVG(user_test_attempt.obtain_marks),2) AS avg_mark ,qbis_test.is_public,qbis_test.published,qbis_test.test_icon FROM qbis_test LEFT JOIN  user_test_attempt ON qbis_test.test_id=user_test_attempt.test_id WHERE qbis_test.user_id=? AND qbis_test.published=? GROUP BY qbis_test.test_id ORDER BY qbis_test.modified_date DESC"),
	    ALL_TEST_LIST_BY_USER_ID("SELECT qbis_test.test_id,DATE_FORMAT(qbis_test.created_date,'%d-%m-%Y') AS created_date,qbis_test.test_title,qbis_test.tags,(SELECT count(user_test_attempt.user_id)  FROM user_test_attempt  INNER JOIN qbis_users ON qbis_users.user_id=user_test_attempt.user_id AND qbis_users.role_id=4 WHERE  user_test_attempt .test_id=qbis_test.test_id) as total_appear, MAX(user_test_attempt.obtain_marks) AS max_mark, MIN(user_test_attempt.obtain_marks) AS min_mark,ROUND(AVG(user_test_attempt.obtain_marks),2) AS avg_mark ,qbis_test.is_public,qbis_test.published,qbis_test.test_icon,qbis_test.is_schedule, DATE_FORMAT(qbis_test.schedule_publish_date,'%d-%m-%Y %h:%i:%s %p') AS schedule_publish_date FROM qbis_test LEFT JOIN  user_test_attempt ON qbis_test.test_id=user_test_attempt.test_id WHERE qbis_test.user_id=? AND qbis_test.published=? GROUP BY qbis_test.test_id ORDER BY qbis_test.modified_date DESC"),
	    ALL_TEST_LIST_BY_USER_ID_WITH_PAGINATION("SELECT qbis_test.test_id,DATE_FORMAT(qbis_test.created_date,'%d-%m-%Y') AS created_date,qbis_test.test_title,qbis_test.tags,(SELECT count(user_test_attempt.user_id)  FROM user_test_attempt  INNER JOIN qbis_users ON qbis_users.user_id=user_test_attempt.user_id AND qbis_users.role_id=4 WHERE  user_test_attempt .test_id=qbis_test.test_id) as total_appear, MAX(user_test_attempt.obtain_marks) AS max_mark, MIN(user_test_attempt.obtain_marks) AS min_mark,ROUND(AVG(user_test_attempt.obtain_marks),2) AS avg_mark ,qbis_test.is_public,qbis_test.published,qbis_test.test_icon,qbis_test.is_schedule, DATE_FORMAT(qbis_test.schedule_publish_date,'%d-%m-%Y %h:%i:%s %p') AS schedule_publish_date FROM qbis_test LEFT JOIN  user_test_attempt ON qbis_test.test_id=user_test_attempt.test_id WHERE qbis_test.user_id=? AND qbis_test.published=? GROUP BY qbis_test.test_id ORDER BY qbis_test.modified_date DESC LIMIT ? OFFSET ?"),
	    CHECK_USER_EMAIL("SELECT user_id FROM qbis_users where user_email=?"),
	    REGISTER_USER("INSERT INTO qbis_users (user_pwd,user_email,role_id,org_id) values(PASSWORD(?),?,?,?)"),
	    REGISTER_SUPER_USER("INSERT INTO qbis_users (user_pwd,user_email,org_id,permissionId,system_language) values(PASSWORD(?),?,?,?,?)"),
	    CREATE_USER_ACCOUNT("INSERT INTO qbis_users(user_email,org_id,permissionId,hash_token,created_by) values(?,?,?,SHA1(?),?)"),
	    PASSWORD_RESET_TOKEN("UPDATE qbis_users SET hash_token=SHA1(?) WHERE user_email=?"),
	    VERIFY_PASSWORD_RESET_TOKEN("SELECT user_email FROM qbis_users WHERE hash_token=SHA1(?)"),
        EXPIRE_PASSWORD_RESET_TOKEN("UPDATE qbis_users SET hash_token=null WHERE user_email=?"),
        UPDATE_PASSWORD("UPDATE qbis_users SET user_pwd=PASSWORD(?) WHERE user_email=?"),
        EMAIL_VERIFICATION("UPDATE qbis_users SET status=1 WHERE user_email=?"),
	    GET_TOTAL_TEST_COUNT("SELECT COUNT(qbis_test.test_id) FROM qbis_test WHERE qbis_test.user_id=?"),
        GET_TOTAL_COURSE_COUNT("SELECT COUNT(course_manager.course_id) FROM course_manager WHERE course_manager.user_id=?"),
        GET_TOTAL_USER_COUNT("SELECT COUNT(user_test_attempt.user_id) FROM user_test_attempt INNER JOIN qbis_test ON user_test_attempt.test_id=qbis_test.test_id WHERE qbis_test.user_id=?"),
        GET_TOTAL_USER_COUNT_CREATED_BY("SELECT COUNT(qbis_users.user_id) FROM qbis_users WHERE qbis_users.created_by=?"),
        GET_MY_TESTS_BY_USERID_DASHBOARD("SELECT user_test_attempt.user_id,qbis_test.test_id, qbis_test.test_title,FLOOR(TIME_TO_SEC(qbis_test.test_time_bound)/60) AS TIME,qbis_users.mobile,qbis_users.user_email, DATE_FORMAT(qbis_test.created_date,'%d-%m-%Y %H:%i:%s') AS created_date,qbis_test.test_attempts,qbis_test.tags,Count(user_test_attempt.test_id) AS 'attemptCount',qbis_test.total_marks, user_test_attempt.obtain_marks FROM user_test_attempt INNER JOIN qbis_test ON user_test_attempt.test_id = qbis_test.test_id INNER JOIN qbis_users ON qbis_users.user_id = user_test_attempt.user_id WHERE qbis_test.user_id=? GROUP BY user_test_attempt.pk ORDER BY MAX(user_test_attempt.test_given_time) DESC limit 5"),
        SAVE_COURSE_BASIC_INFO("INSERT INTO course_manager(title,sub_title,description,highlights,promo_video,featured_image,tags,is_paid,is_scheduled,level_id,language_id,user_id,modified_date,schedule_publish_date,course_type,scorm_root_path)  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,NOW(),?,?,?)"),
        SAVE_COURSE_ATTEMPTS_MAPPINGS("INSERT INTO course_attempts_mapping(course_id,attempt_id,name,is_practice,created_date,created_by,is_deleted) VALUES (?,?,?,?,?,?,?)"),
        UPDATE_COURSE_BASIC_INFO("UPDATE course_manager  SET title=?, sub_title=?,description=?, highlights=?, promo_video=?, featured_image=CASE WHEN ISNULL(?) THEN featured_image ELSE ? END,tags=?, is_paid=?, is_scheduled=?, level_id=?, language_id=?,schedule_publish_date=? ,modified_date=NOW() WHERE user_id=? AND course_id=?"),
        GET_COURSE_LEVEL_LIST("SELECT level_id, level_name FROM difficulty_level;"),
        GET_COURSE_LANGUAGE_LIST("SELECT language_id,language_name FROM language_content"),
        GET_COURSE_DETAILS_BY_COURSE_ID("SELECT course_manager.course_id, course_manager.title, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags, difficulty_level.level_name, language_content.language_name, DATE_FORMAT(course_manager.modified_date,'%d-%m-%Y') AS modified_date, DATE_FORMAT(course_manager.modified_date,'%H:%i:%s') AS modified_date, course_manager.level_id, course_manager.language_id,course_manager.is_active,course_manager.published,course_manager.sub_title,course_manager.is_scheduled, course_manager.schedule_publish_date, course_manager.course_type, course_manager.scorm_root_path FROM course_manager INNER JOIN difficulty_level ON course_manager.level_id=difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id=language_content.language_id WHERE course_id=? AND user_id=? AND published=?"),
        SAVE_COURSE_SECTION_DETAILS("INSERT INTO course_section_manager(section_name,course_id, is_practice,parent_id,is_chapter_test,contains_chapter_test) VALUES(?,?,?,?,?,?)"),
        SAVE_COURSE_TEST_DETAILS("INSERT INTO course_section_manager(section_name,course_id, is_practice,is_chapter_test) VALUES(?,?,?,1)"),
        SAVE_COURSE_SECTION_DETAILS_WITH_SETTING("INSERT INTO course_section_manager(section_name,course_id,quiz_mandatory,passing_criteria,min_time_spent,parent_id) VALUES(?,?,?,?,?,?)"),
        GET_SECTION_LIST_FOR_COURSE("SELECT course_section_manager.section_id, course_section_manager.section_name,course_section_manager.order, course_section_manager.quiz_mandatory, course_section_manager.passing_criteria, (course_section_manager.min_time_spent * 60) AS min_time_spent,(SELECT SUM(activity_user_course_content_view.spent_time)  FROM activity_user_course_content_view WHERE activity_user_course_content_view.section_id= course_section_manager.section_id AND activity_user_course_content_view.course_id = course_manager.course_id AND activity_user_course_content_view.user_id= ? GROUP BY activity_user_course_content_view.section_id ) AS spent_time FROM course_section_manager INNER JOIN course_manager ON course_section_manager.course_id=course_manager.course_id WHERE  course_manager.course_id=? AND course_section_manager.published=1"),
        GET_SECTION_LIST_FOR_COURSE_PREVIEW("SELECT course_section_manager.section_id, course_section_manager.section_name,course_section_manager.order,course_section_manager.is_practice,course_section_manager.is_chapter_test FROM course_section_manager INNER JOIN course_manager ON course_section_manager.course_id=course_manager.course_id WHERE  course_manager.course_id=?"),
        GET_ATTEMPT_COUNT_FOR_DYNAMIC_ATTEMPT_CREATION("SELECT count(*) from course_attempts"),
        GET_ATTEMPT_LIST_FOR_DYNAMIC_ATTEMPT_CREATION("SELECT course_attempts.id,course_attempts.name from course_attempts"),
        GET_ATTEMPT_LIST_FOR_DYNAMIC_ATTEMPT_CREATION_BY_ID("SELECT course_attempts.id,course_attempts.name from course_attempts WHERE course_attempts.id = ?"),
        SAVE_COURSE_SECTION_CONTENT("INSERT INTO course_content_manager(content_name, content, content_type_id, content_ order) VALUES(?, ?, ?, 1)"),
        GET_CONTENT_TYPE_ID("SELECT content_type_id, type_name, content_type.icon_path FROM content_type WHERE extension=? AND is_active=1"),
        GET_COURSE_CONTENT_LIST("SELECT course_content_manager.content_id, course_content_manager.content_name, content_section_mapping.section_id, course_content_manager.content, course_content_manager.content_type_id, content_type.type_name, content_type.icon_path, course_content_manager.content_order,content_section_mapping.title, course_content_manager.visibility,course_content_manager.is_external_url,course_content_manager.no_of_pages FROM course_content_manager INNER JOIN content_section_mapping  ON content_section_mapping.content_id=course_content_manager.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id WHERE content_section_mapping.section_id =? ORDER BY course_content_manager.content_order ASC"),
       // GET_COURSE_CONTENT_LIST_WITH_ATTEMPT("SELECT course_content_manager.content_id, course_content_manager.content_name, content_section_mapping.section_id, course_content_manager.content, course_content_manager.content_type_id, content_type.type_name, content_type.icon_path, course_content_manager.content_order,content_section_mapping.title, course_content_manager.visibility,course_content_manager.is_external_url,course_content_manager.no_of_pages, course_attempts.id, course_attempts.name FROM course_content_manager INNER JOIN content_section_mapping  ON content_section_mapping.content_id=course_content_manager.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id LEFT JOIN course_attempts ON course_attempts.id = content_section_mapping.attempt_id WHERE content_section_mapping.section_id =? ORDER BY course_content_manager.content_order ASC"),
        GET_COURSE_CONTENT_LIST_WITH_ATTEMPT("SELECT course_content_manager.content_id, course_content_manager.content_name, content_section_mapping.section_id, course_content_manager.content, course_content_manager.content_type_id, content_type.type_name, content_type.icon_path, course_content_manager.content_order,content_section_mapping.title, course_content_manager.visibility,course_content_manager.is_external_url,course_content_manager.no_of_pages, course_attempts.id, course_attempts.name,content_section_mapping.session_id FROM course_content_manager INNER JOIN content_section_mapping ON content_section_mapping.content_id=course_content_manager.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id LEFT JOIN course_attempts ON course_attempts.id = content_section_mapping.attempt_id WHERE content_section_mapping.section_id =? ORDER BY course_content_manager.content_order ASC"),
        GET_COURSE_LIST_BY_USERID("SELECT course_manager.course_id, course_manager.title, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags, difficulty_level.level_name, language_content.language_name, DATE_FORMAT(course_manager.created_date,'%d-%m-%Y') AS created_date, DATE_FORMAT(course_manager.created_date,'%H:%i:%s') AS created_time,course_manager.sub_title,(SELECT COUNT(course_assessment.course_id) FROM course_assessment WHERE course_assessment.course_id=course_manager.course_id) as enrollCount,course_manager.is_scheduled, DATE_FORMAT(course_manager.schedule_publish_date,'%d-%m-%Y %h:%i:%s %p') AS schedule_publish_date FROM course_manager INNER JOIN difficulty_level ON course_manager.level_id=difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id=language_content.language_id WHERE course_manager.user_id=? AND course_manager.published=? ORDER BY course_manager.modified_date DESC"),
        GET_COURSE_LIST_BY_USERID_WITH_PAGINATION("SELECT course_manager.course_id, course_manager.title, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags, difficulty_level.level_name, language_content.language_name, DATE_FORMAT(course_manager.created_date,'%d-%m-%Y') AS created_date, DATE_FORMAT(course_manager.created_date,'%H:%i:%s') AS created_time,course_manager.sub_title,(SELECT COUNT(course_assessment.course_id) FROM course_assessment WHERE course_assessment.course_id=course_manager.course_id) as enrollCount,course_manager.is_scheduled, DATE_FORMAT(course_manager.schedule_publish_date,'%d-%m-%Y %h:%i:%s %p') AS schedule_publish_date, course_manager.course_type FROM course_manager INNER JOIN difficulty_level ON course_manager.level_id=difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id=language_content.language_id WHERE course_manager.user_id=? AND course_manager.published=? ORDER BY course_manager.modified_date DESC LIMIT ? OFFSET ?"),
        UPDATE_PUBLISH_STATUS_COURSE("UPDATE course_manager SET course_manager.published=?, modified_date=now(), published_on=now() WHERE course_manager.course_id=?"),
        UPDATE_SHARE_STATUS_COURSE("UPDATE course_manager SET course_manager.shared=? WHERE course_manager.course_id=?"),
        UPDATE_PUBLISH_STATUS_SECTION("UPDATE course_section_manager SET published=? WHERE section_id=?"),
        CONTENT_ATTEMPT_RELATION("SELECT content_id,attempt_id from content_section_mapping"),
        COUNT_TOTAL_CONTENT_OF_COURSE("SELECT COUNT(course_content_manager.content_type_id) AS total_contents,content_type.type_name FROM course_section_manager INNER JOIN content_section_mapping ON content_section_mapping.section_id=course_section_manager.section_id INNER JOIN course_content_manager ON course_content_manager.content_id=content_section_mapping.content_id INNER JOIN content_type ON course_content_manager.content_type_id=content_type.content_type_id WHERE course_section_manager.course_id=? GROUP BY content_type.type_name"),
        IS_SECTION_LINK_WITH_COURSE("SELECT course_section_manager.section_id FROM course_section_manager INNER JOIN course_manager ON course_section_manager.course_id=course_manager.course_id WHERE course_section_manager.section_id=? AND course_manager.course_id=? AND course_manager.user_id=?"),
        UPDATE_MODIFY_DATE_OF_COURSE("UPDATE course_manager SET modified_date=now() WHERE course_manager.course_id=?"),
        UPDATE_COURSE_CONTENT("UPDATE course_content_manager SET content_name=?, content=?, content_type_id=? WHERE course_content_manager.content_id=?"),
        DELETE_COURSE_CONTENT("DELETE course_content_manager FROM course_content_manager WHERE course_content_manager.content_id=?"),
        UPDATE_COURSE_SECTION_NAME("UPDATE course_section_manager SET section_name=? WHERE course_section_manager.section_id=?"),
        UPDATE_DEVICE_DETAILS_BY_DEVICEID("UPDATE qbis_users_device SET device_name=?, device_os=?, app_version=?, register_pn_token=?, os_version=?, network=? WHERE qbis_users_device.device_id=?"),
       //FIND_ONE_USER_BY_USERID("SELECT * FROM qbis_users INNER JOIN role_description ON qbis_users.role_id = role_description.role_id WHERE user_id=?"),
        DELETE_COURSE_SECTION("DELETE course_section_manager FROM course_section_manager WHERE  course_section_manager.section_id=?"),
        DELETE_COURSE_CONTENT_BY_SECTION_ID("DELETE course_content_manager FROM course_content_manager INNER JOIN content_section_mapping ON content_section_mapping.content_id=course_content_manager.content_id WHERE content_section_mapping.section_id=?"),
        INSERT_DEVICE_DETAILS("INSERT INTO  qbis_users_device(device_id, device_name, device_os, app_version, register_pn_token, os_version, network) VALUES(?,?,?,?,?,?,?)"),
        CHECK_EMAIL_EXIST("SELECT qbis_users.user_id FROM qbis_users WHERE qbis_users.user_email =?"),
        CHECK_USER_PASSOWORD_BY_EMAIL("SELECT qbis_users.user_id FROM qbis_users WHERE qbis_users.user_email =? AND qbis_users.user_pwd = PASSWORD (?)"),        
        MAX_SECTION_CONTENT_ORDER("SELECT MAX(course_content_manager.content_order) FROM course_content_manager INNER JOIN content_section_mapping ON content_section_mapping.content_id=course_content_manager.content_id WHERE content_section_mapping.section_id=?"),
        UPDATE_SECTION_CONTENT_ORDER("UPDATE course_content_manager SET content_order=? WHERE course_content_manager.content_id=?"),
        GET_PUBLISHED_COURSE_LIST("SELECT course_manager.course_id, course_manager.title, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags, difficulty_level.level_name, language_content.language_name, DATE_FORMAT(course_manager.created_date,'%d-%m-%Y') AS created_date, DATE_FORMAT(course_manager.created_date,'%H:%i:%s') AS created_time FROM course_manager INNER JOIN difficulty_level ON course_manager.level_id=difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id=language_content.language_id WHERE course_manager.published=? ORDER BY course_manager.published_on DESC limit ?, ?"),
        GET_PUBLISHED_COURSE_DETAIL("SELECT course_manager.course_id, course_manager.title, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags, difficulty_level.level_name, language_content.language_name, DATE_FORMAT(course_manager.modified_date,'%d-%m-%Y') AS modified_date, DATE_FORMAT(course_manager.modified_date,'%H:%i:%s') AS modified_date, course_manager.level_id, course_manager.language_id,course_manager.is_active,course_manager.published,course_assessment.isEnroll,course_manager.course_type FROM course_manager INNER JOIN difficulty_level ON course_manager.level_id=difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id=language_content.language_id LEFT JOIN course_assessment ON course_assessment.course_id = course_manager.course_id WHERE course_manager.course_id=? AND published = ?"),
        UPDATE_ACCESS_ID_BY_EMAIL("UPDATE qbis_users set qbis_users.access_id=? where qbis_users.user_email=?"),
        TOTAL_NUMBER_OF_PUBLISHED_COURSE("SELECT COUNT(DISTINCT course_manager.course_id) AS total_course FROM course_manager INNER JOIN qbis_users ON course_manager.user_id = qbis_users.user_id LEFT JOIN user_course_mapping ON user_course_mapping.course_id = course_manager.course_id WHERE course_manager.published = ? AND course_manager.shared = CASE WHEN (user_course_mapping.user_id = ?)  THEN 1 ELSE 0 END AND qbis_users.org_id=?"),
        TOTAL_NUMBER_OF_PUBLISHED_COURSE_BY_USERID("SELECT COUNT(course_id) AS total_course FROM course_manager WHERE course_manager.published=? AND course_manager.user_id=?"),
        TOTAL_NUMBER_OF_UPCOMING_COURSE("SELECT COUNT(DISTINCT course_manager.course_id) AS total_course FROM course_manager INNER JOIN qbis_users ON course_manager.user_id = qbis_users.user_id LEFT JOIN user_course_mapping ON user_course_mapping.course_id = course_manager.course_id WHERE course_manager.published=? AND course_manager.shared = CASE WHEN (user_course_mapping.user_id = ?)  THEN 1 ELSE 0 END AND qbis_users.org_id=? AND course_manager.schedule_publish_date BETWEEN CURDATE() AND CURDATE() + INTERVAL 3 DAY"),
        GET_PUBLISHED_COURSE_LIST_FOR_APP("SELECT course_manager.course_id, course_manager.title, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags,course_manager.published,difficulty_level.level_name, language_content.language_name, COUNT(course_section_manager.section_id) as countSec,course_assessment.isEnroll, qbis_users.user_email FROM course_manager INNER JOIN qbis_users ON course_manager.user_id=qbis_users.user_id INNER JOIN difficulty_level ON course_manager.level_id = difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id = language_content.language_id LEFT JOIN course_section_manager ON course_section_manager.course_id = course_manager.course_id AND course_section_manager.published=1 LEFT JOIN course_assessment ON course_assessment.course_id=course_manager.course_id LEFT JOIN user_course_mapping ON user_course_mapping.course_id = course_manager.course_id WHERE course_manager.published = ? AND qbis_users.org_id= ? AND course_manager.shared = CASE WHEN (user_course_mapping.user_id = ?)  THEN 1 ELSE 0 END GROUP BY course_manager.course_id  ORDER BY course_manager.published_on DESC LIMIT  ? OFFSET ?"),
        GET_UPCOMING_COURSE_LIST_FOR_APP("SELECT course_manager.course_id, course_manager.title, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags,course_manager.published,difficulty_level.level_name, language_content.language_name, COUNT(course_section_manager.section_id) as countSec,course_assessment.isEnroll, DATE_FORMAT(course_manager.schedule_publish_date,'%d-%m-%Y %h:%i:%s %p') AS schedule_publish_date,qbis_users.user_email FROM course_manager INNER JOIN qbis_users ON course_manager.user_id=qbis_users.user_id INNER JOIN difficulty_level ON course_manager.level_id = difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id = language_content.language_id LEFT JOIN course_section_manager ON course_section_manager.course_id = course_manager.course_id AND course_section_manager.published=1 LEFT JOIN course_assessment ON course_assessment.course_id=course_manager.course_id LEFT JOIN user_course_mapping ON user_course_mapping.course_id = course_manager.course_id WHERE course_manager.published=? AND qbis_users.org_id= ? AND course_manager.shared = CASE WHEN (user_course_mapping.user_id = ?)  THEN 1 ELSE 0 END AND course_manager.schedule_publish_date BETWEEN CURDATE() AND CURDATE() + INTERVAL 3 DAY GROUP BY course_manager.course_id ORDER BY course_manager.schedule_publish_date DESC LIMIT  ? OFFSET ?"),
        GET_PUBLISHED_COURSE_SECTION("SELECT course_section_manager.section_id, course_section_manager.section_name FROM course_section_manager INNER JOIN course_manager ON course_section_manager.course_id=course_manager.course_id WHERE  course_manager.course_id=? AND course_section_manager.published=?"),
        SAVE_USER_COURSE_MAPPING("INSERT INTO user_course_mapping(course_id,user_id) VALUES(?, ?)"),
        SAVE_USER_TEST_MAPPING("INSERT INTO user_test_mapping(user_id,test_id) values (?,?)"),
        GET_COUNT_ATTEMPTED_TEST_BY_USER("SELECT COUNT(user_test_attempt.pk) as attemptCount FROM user_test_attempt WHERE  user_test_attempt.user_id=? AND user_test_attempt.test_id=?"),
        GET_ATTEMPTED_TEST_HISTORY("SELECT DATE_FORMAT(user_test_attempt.test_given_time,'%d-%m-%Y %H:%i:%s') AS test_given_time, user_test_attempt.correct_que_attempt, ((user_test_attempt.obtain_marks * 100) / qbis_test.total_marks) AS grade,user_test_attempt.pk FROM user_test_attempt INNER JOIN qbis_test ON qbis_test.test_id = user_test_attempt.test_id WHERE  user_test_attempt.user_id = ?  AND user_test_attempt.test_id =? AND ststus = 1 ORDER BY user_test_attempt.test_given_time DESC LIMIT 5  "),
        GET_SECTIONS_BY_TEST_ATTEMPT_PK("SELECT user_section_attempt.pk, user_section_attempt.section_id, qbis_section.section_name FROM user_section_attempt INNER JOIN qbis_section ON user_section_attempt.section_id = qbis_section.section_id INNER JOIN user_test_attempt ON user_test_attempt.pk = user_section_attempt.user_test_attempt_pk WHERE user_test_attempt.pk = ? and user_test_attempt.ststus=1"),
        GET_QUESTIONS_BY_SECTION_ATTEMPT_PK("SELECT qbis_quest.question_id, qbis_quest.question_txt, qbis_quest.question_type,uqa.is_correct, question_section_mapping.question_order, uqa.pk, qbis_quest.answer_explanation, uqa.is_favorite, uqa.notes,qbis_quest.answer_value,uqa.answer_value,qbis_quest.question_setting FROM user_section_attempt usa LEFT JOIN qbis_section sec ON sec.section_id = usa.section_id LEFT JOIN question_section_mapping  ON question_section_mapping.section_id = sec.section_id  INNER JOIN qbis_quest ON qbis_quest.question_id = question_section_mapping.question_id LEFT JOIN user_question_attempt uqa ON uqa.qbis_quest_question_id = qbis_quest.question_id AND uqa.user_section_attempt_pk = usa.pk WHERE usa.pk = ? AND usa.user_id = ?"),
		GET_OPTIONS_BY_QUESTIONID_QUEATTEMPTPK("SELECT qbis_options.pk,   qbis_options.option_name, CHAR (qbis_options.option_position + 64) AS option_position, qbis_options.correct_answer_flag, user_attempt_answer.qbis_option_id FROM qbis_options LEFT JOIN user_attempt_answer ON user_attempt_answer.qbis_option_id = qbis_options.pk AND user_attempt_answer.user_question_attempt_pk=? WHERE qbis_options.question_id =?"),
		TEST_DETAIL_BY_ATTEMPTID("SELECT qbis_test.test_id,qbis_test.test_title, qbis_test.test_time_bound,qbis_test.review_with_correct,qbis_test.is_random FROM user_test_attempt INNER JOIN qbis_test ON user_test_attempt.test_id = qbis_test.test_id WHERE user_test_attempt.pk=?"),
		GET_ATTEMPTED_TEST_SUMMARY("SELECT DATE_FORMAT(user_test_attempt.test_given_time,'%d-%m-%Y %H:%i:%s') AS test_given_time, user_test_attempt.correct_que_attempt, ((user_test_attempt.obtain_marks * 100) / qbis_test.total_marks) AS grade,user_test_attempt.pk FROM user_test_attempt INNER JOIN qbis_test ON qbis_test.test_id = user_test_attempt.test_id WHERE  user_test_attempt.user_id = ?  AND user_test_attempt.test_id =?  ORDER BY user_test_attempt.test_given_time DESC  "),
		GET_SECTIONLIST_FOR_EDIT("SELECT qbis_section.section_id, qbis_section.section_name, qbis_section.test_id, qbis_section.sequence FROM qbis_section WHERE qbis_section.test_id=?"),
        GET_QUESTIONLIST_FOR_EDIT("SELECT qbis_quest.question_id,qbis_quest.question_txt,qbis_quest.answer_explanation,question_section_mapping.question_order,question_section_mapping.question_marks,qbis_quest.question_type,question_section_mapping.negative_mark,qbis_quest.is_formula,CONVERT(qbis_quest.math_formula USING utf8) AS math_formula,qbis_quest.is_parent,qbis_quest.answer_value,qbis_quest.question_setting FROM qbis_quest INNER JOIN  question_section_mapping ON qbis_quest.question_id=question_section_mapping.question_id INNER JOIN qbis_section ON question_section_mapping.section_id=qbis_section.section_id WHERE qbis_section.section_id=?"),
        GET_OPTION_LIST_BY_QUES_ID("SELECT qbis_options.pk,CONVERT(qbis_options.option_name USING utf8) AS option_name,qbis_options.correct_answer_flag,qbis_options.option_position FROM qbis_quest INNER JOIN qbis_options ON qbis_quest.question_id=qbis_options.question_id WHERE qbis_options.question_id=?"),
        GET_SUB_OPTION_LIST_BY_QUES_ID("SELECT qbis_sub_options.pk,CONVERT(qbis_sub_options.option_name USING utf8) AS option_name,qbis_sub_options.option_position FROM qbis_quest INNER JOIN qbis_sub_options ON qbis_quest.question_id=qbis_sub_options.question_id WHERE qbis_sub_options.question_id=?;"),
        GET_TESTDETAILS_FOR_EDIT("SELECT qbis_test.test_id, qbis_test.test_title, qbis_test.test_desc, qbis_test.test_instruct, qbis_test.tags, qbis_test.test_attempts, qbis_test.negative_mark,FLOOR(TIME_TO_SEC(qbis_test.test_time_bound)/60) as timeMinute, qbis_test.test_adaptive, qbis_test.test_pause, qbis_test.is_public, qbis_test.is_question_mark_same, qbis_test.every_ques_mark,qbis_test.is_review,qbis_test.review_with_correct,qbis_test.shuffle_section,qbis_test.shuffle_question, qbis_test.shuffle_option, qbis_test.test_icon, qbis_test.is_schedule, qbis_test.schedule_publish_date,qbis_test.is_random, qbis_test.max_question FROM qbis_test WHERE qbis_test.test_id=? AND qbis_test.user_id=? AND qbis_test.published=0"),
        SAVE_TEST_DETAIL("INSERT INTO qbis_test(test_title,test_desc,test_instruct,tags,negative_mark,test_time_bound,test_pause,test_adaptive,user_id,org_id,is_public,is_question_mark_same,every_ques_mark,test_attempts,is_review,review_with_correct,shuffle_section,shuffle_question, shuffle_option, modified_date,is_schedule,schedule_publish_date, is_random, max_question) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,NOW(),?,?,?,?)"),
        DELETE_OPTIONS_BY_TEST_ID("DELETE qbis_options FROM qbis_test INNER JOIN qbis_section ON qbis_test.test_id=qbis_section.test_id INNER JOIN qbis_quest ON qbis_section.section_id=qbis_quest.section_id INNER JOIN qbis_options ON qbis_quest.question_id=qbis_options.question_id WHERE qbis_test.published=0 AND qbis_test.test_id=? AND qbis_test.user_id=?"),
        DELETE_QUESTIONS_BY_TEST_ID("DELETE qbis_quest FROM qbis_test INNER JOIN qbis_section ON qbis_test.test_id=qbis_section.test_id INNER JOIN qbis_quest ON qbis_section.section_id=qbis_quest.section_id WHERE qbis_test.published=0 AND qbis_test.test_id=? AND qbis_test.user_id=?"),
        DELETE_SECTIONS_BY_TEST_ID("DELETE qbis_section FROM qbis_test INNER JOIN qbis_section on qbis_test.test_id=qbis_section.test_id where qbis_test.published=0 AND qbis_test.test_id=? AND qbis_test.user_id=?"),
        DELETE_TEST_BY_TEST_ID("DELETE qbis_test FROM qbis_test WHERE qbis_test.published=0 AND qbis_test.test_id=? AND qbis_test.user_id=?"),
        SECTION_MARK_UPDATE("UPDATE qbis_section SET section_marks=? WHERE section_id=?"),
		TEST_MARK_UPDATE("UPDATE qbis_test SET total_marks=? WHERE test_id=?"),
		SAVE_SECTION_DETAIL("INSERT INTO qbis_section(section_name,test_id) values(?,?)"),
	    SAVE_QUESTION_DETAIL("INSERT INTO qbis_quest(question_txt,question_no,section_id,question_marks,question_type,answer_explanation,negative_mark,is_formula,math_formula) values(?,?,?,?,?,?,?,?,?)"),
	    QUESTION_INSERT_OPTION("INSERT INTO qbis_options(question_id,option_name,correct_answer_flag,option_position) values(?,?,?,?)"),
	    QUESTION_INSERT_SUB_OPTION("INSERT INTO qbis_sub_options(question_id,option_name,option_position) values(?,?,?)"),
		GET_TEST_SCHEDULE_INFO("SELECT qbis_test.is_schedule, qbis_test.schedule_publish_date,qbis_test.test_title FROM qbis_test WHERE test_id=?"),
	    TEST_SAVE_STATUS_UPDATE("UPDATE qbis_test SET status=1,modified_date=NOW() WHERE test_id=?"),
	    TEST_SHARE_STATUS_UPDATE("UPDATE qbis_test SET shared = ? WHERE test_id=?"),
		TEST_PUBLISH_STATUS_UPDATE("UPDATE qbis_test SET status=1, published=?,published_date=NOW(),modified_date=NOW() WHERE test_id=?"),
		CHANGE_PUBLISH_STATUS_OF_SCHEDULE_TEST("UPDATE qbis_test SET published=1,published_date=NOW(),modified_date=NOW() WHERE qbis_test.published=2 AND qbis_test.schedule_publish_date = NOW()"),
		UPDATE_TEST_DETAIL("UPDATE qbis_test SET test_title=?,test_desc=?,test_instruct=?,tags=?,negative_mark=?,test_time_bound=?,test_pause=?,test_adaptive=?,is_public=?, is_question_mark_same=?, every_ques_mark=?,test_attempts=?,is_review=?,review_with_correct=?, shuffle_section=?,shuffle_question=?, shuffle_option=?, modified_date=NOW(),is_schedule=?, schedule_publish_date=?, is_random=?, max_question=? WHERE qbis_test.test_id=?"),
		GET_USER_TEST_DETAIL("SELECT qbis_test.test_id, qbis_test.test_title, qbis_test.test_desc, qbis_test.test_instruct, qbis_test.tags, qbis_test.test_attempts, qbis_test.negative_mark, qbis_test.test_time_bound, qbis_test.test_adaptive, qbis_organization.org_Name, qbis_users.mobile, qbis_test.test_pause, qbis_test.shuffling, qbis_test.test_review, qbis_test.org_id, qbis_test.total_marks, qbis_test.`status`, qbis_test.published, qbis_test.shared, qbis_test.is_public, qbis_test.is_review, qbis_test.review_with_correct,COUNT(question_section_mapping.question_id) as count, FLOOR(TIME_TO_SEC(qbis_test.test_time_bound)/60) as timeMinute,qbis_test.shuffle_section,qbis_test.shuffle_question, qbis_test.shuffle_option FROM qbis_test INNER JOIN qbis_organization ON qbis_organization.org_id = qbis_test.org_id INNER JOIN qbis_users ON qbis_test.user_id = qbis_users.user_id INNER JOIN qbis_section ON qbis_section.test_id=qbis_test.test_id INNER JOIN question_section_mapping ON question_section_mapping.section_id=qbis_section.section_id WHERE qbis_test.test_id=? AND qbis_test.user_id=?"),
		GET_TEST_FOR_PREVIEW("SELECT qbis_test.test_id, qbis_test.test_title, qbis_test.test_desc, qbis_test.test_instruct, qbis_test.tags, qbis_test.test_attempts, qbis_test.negative_mark, qbis_test.test_time_bound, qbis_test.test_adaptive, qbis_organization.org_Name, qbis_users.mobile, qbis_test.test_pause, qbis_test.shuffling, qbis_test.test_review, qbis_test.org_id, qbis_test.total_marks, qbis_test.status, qbis_test.published, qbis_test.shared,  qbis_test.is_public, qbis_test.is_review, qbis_test.review_with_correct,COUNT(question_section_mapping.question_id) as count, FLOOR(TIME_TO_SEC(qbis_test.test_time_bound)/60) as timeMinute,qbis_test.shuffle_section,qbis_test.shuffle_question, qbis_test.shuffle_option, qbis_test.is_schedule, qbis_test.schedule_publish_date, qbis_test.is_random, qbis_test.max_question FROM qbis_test INNER JOIN qbis_organization ON qbis_organization.org_id = qbis_test.org_id INNER JOIN qbis_users ON qbis_test.user_id = qbis_users.user_id LEFT JOIN qbis_section ON qbis_section.test_id=qbis_test.test_id LEFT JOIN question_section_mapping ON question_section_mapping.section_id=qbis_section.section_id WHERE qbis_test.test_id=? AND qbis_test.user_id=? GROUP BY qbis_test.test_id"),
		GET_SECTION_LIST_FOR_PREVIEW("SELECT qbis_section.section_id, qbis_section.section_name FROM qbis_section INNER JOIN qbis_test ON qbis_section.test_id = qbis_test.test_id WHERE qbis_section.test_id=? AND qbis_test.user_id=?"),
		GET_QUES_LIST_BY_SECTION_ID("SELECT qbis_quest.question_id,CONVERT(qbis_quest.question_txt USING utf8) AS question_txt,qbis_quest.answer_explanation,question_section_mapping.question_order,question_section_mapping.question_marks,qbis_quest.question_type,question_section_mapping.negative_mark,qbis_quest.is_formula,CONVERT(qbis_quest.math_formula USING utf8) AS math_formula, qbis_quest.answer_value,qbis_quest.question_setting FROM qbis_quest INNER JOIN question_section_mapping ON  qbis_quest.question_id = question_section_mapping.question_id INNER JOIN qbis_section ON question_section_mapping.section_id=qbis_section.section_id WHERE question_section_mapping.section_id=?"),
		SAVE_APP_USER_NEW("INSERT INTO qbis_users (user_pwd,user_email,access_id,role_id) values(PASSWORD(?),?,?,4)"),
		ACCESS_TOKEN_NULL_NEW("UPDATE qbis_users SET qbis_users.access_id=? WHERE qbis_users.access_id=?"),
		CHECK_ACCESS_TOKEN("SELECT user_id FROM qbis_users WHERE access_id =?"),
		GET_TEST_LIST("SELECT qbis_test.test_id,qbis_test.test_title,TIME_TO_SEC(qbis_test.test_time_bound) AS TIME,COUNT(question_section_mapping.question_id) AS total_questions, qbis_users.mobile,DATE_FORMAT(qbis_test.created_date,'%d-%m-%Y %H:%i:%s') AS created_date ,qbis_test.test_attempts,qbis_test.test_desc,qbis_test.tags,qbis_test.test_instruct,qbis_test.is_public, qbis_test.is_review, qbis_test.review_with_correct, qbis_test.negative_mark, qbis_test.total_marks, qbis_test.test_pause, qbis_users.user_email, qbis_test.test_icon FROM qbis_test INNER JOIN qbis_users ON qbis_test.user_id=qbis_users.user_id INNER JOIN qbis_section ON qbis_test.test_id =qbis_section.test_id INNER JOIN question_section_mapping ON question_section_mapping.section_id=qbis_section.section_id LEFT JOIN user_test_mapping ON qbis_test.test_id = user_test_mapping.test_id WHERE qbis_test.is_public=0 AND qbis_test.status=1 AND qbis_test.published=1 AND qbis_users.org_id=? AND qbis_test.shared = CASE WHEN (user_test_mapping.user_id = ?) THEN 1 ELSE 0 END GROUP BY qbis_test.test_id ORDER BY qbis_test.published_date DESC LIMIT ? OFFSET ?"),
		GET_ORG_ID_BY_USER_ID("SELECT org_id FROM qbis_users WHERE qbis_users.user_id=? "),
		GET_UPCOMING_TEST_LIST("SELECT qbis_test.test_id,qbis_test.test_title,TIME_TO_SEC(qbis_test.test_time_bound) AS TIME,COUNT(question_section_mapping.question_id) AS total_questions, qbis_users.mobile,DATE_FORMAT(qbis_test.schedule_publish_date,'%d-%m-%Y %h:%i:%s %p') AS created_date ,qbis_test.test_attempts,qbis_test.test_desc,qbis_test.tags,qbis_test.test_instruct,qbis_test.is_public, qbis_test.is_review, qbis_test.review_with_correct, qbis_test.negative_mark, qbis_test.total_marks, qbis_test.test_pause, qbis_users.user_email, qbis_test.test_icon FROM qbis_test INNER JOIN qbis_users ON qbis_test.user_id=qbis_users.user_id INNER JOIN qbis_section ON qbis_test.test_id =qbis_section.test_id INNER JOIN question_section_mapping ON question_section_mapping.section_id=qbis_section.section_id LEFT JOIN user_test_mapping ON qbis_test.test_id = user_test_mapping.test_id WHERE qbis_test.is_public=0 AND qbis_test.status=1 AND qbis_users.org_id=? AND qbis_test.published=2 AND qbis_test.shared = CASE WHEN (user_test_mapping.user_id = ?) THEN 1 ELSE 0 END AND qbis_test.schedule_publish_date BETWEEN CURDATE() AND CURDATE() + INTERVAL 3 DAY GROUP BY qbis_test.test_id ORDER BY qbis_test.schedule_publish_date DESC LIMIT ? OFFSET ?"),
		FIND_USER_ID("SELECT user_id FROM qbis_users_device WHERE access_id=?"),
		TEST_PROGRESS("INSERT INTO user_test_attempt (user_id,test_id) VALUES(?,?)"),
		GET_QUES_LIST_BY_TEST_ID("SELECT qbis_quest.question_id,CONVERT(qbis_quest.question_txt USING utf8) AS question_txt,qbis_quest.answer_explanation,question_section_mapping.question_order,question_section_mapping.question_marks,qbis_quest.question_type,question_section_mapping.negative_mark FROM qbis_quest INNER JOIN question_section_mapping ON qbis_quest.question_id= question_section_mapping.question_id INNER JOIN  qbis_section ON qbis_quest.section_id=qbis_section.section_id INNER JOIN qbis_test ON qbis_section.test_id=qbis_test.test_id WHERE qbis_test.test_id=?"),
		FIND_ONE_TEST("SELECT qbis_test.test_id, qbis_test.test_title, qbis_test.test_desc, qbis_test.test_instruct, qbis_test.tags, qbis_test.test_attempts, qbis_test.negative_mark, qbis_test.test_time_bound, qbis_test.test_adaptive, qbis_organization.org_Name, qbis_users.mobile, qbis_test.test_pause, qbis_test.shuffling, qbis_test.test_review, qbis_test.org_id, qbis_test.total_marks, qbis_test.status, qbis_test.published, qbis_test.shared, qbis_test.shuffle_section,qbis_test.shuffle_question, qbis_test.shuffle_option,qbis_test.is_random  FROM qbis_test INNER JOIN qbis_organization ON qbis_organization.org_id = qbis_test.org_id INNER JOIN qbis_users ON qbis_test.user_id = qbis_users.user_id WHERE  qbis_test.is_public=0 AND qbis_test.status=1 AND qbis_test.published=1 AND qbis_test.test_id=?"),
        GET_SECTION_LIST_BY_TEST_ID("SELECT qbis_section.section_id, qbis_section.section_name FROM qbis_section INNER JOIN qbis_test ON qbis_section.test_id = qbis_test.test_id WHERE qbis_section.test_id=?"),
		SAVE_GIVING_TEST_JSON("UPDATE user_test_attempt SET answer_json=? WHERE user_test_attempt.pk=?"),
		GET_ATTEMPTED_TEST_RESULT("SELECT user_test_attempt.pk, user_test_attempt.correct_que_attempt, user_test_attempt.wrong_que_attempt, user_test_attempt.unattampt_que, SEC_TO_TIME(user_test_attempt.time_taken) , qbis_test.test_time_bound, user_test_attempt.obtain_marks, qbis_test.total_marks,qbis_test.test_id,qbis_test.is_review,qbis_test.review_with_correct, qbis_test.test_title FROM user_test_attempt INNER JOIN qbis_test ON qbis_test.test_id = user_test_attempt.test_id WHERE pk =? AND user_test_attempt.user_id=? AND user_test_attempt.ststus!=0;"),
		GET_APP_USER_PROFILE("SELECT qbis_users.user_id, qbis_users.user_name, qbis_users.user_pwd, qbis_users.status, qbis_users.last_login, qbis_users.first_name, qbis_users.last_name, qbis_users.org_id, qbis_users.mobile, qbis_users.role_id, qbis_users.user_email, qbis_users.hash_token, qbis_users.access_id, dob, qbis_users.about, qbis_users.profile_img,qbis_users.registration_id,qbis_users.system_language FROM qbis_users WHERE user_id=?"),
		UPDATE_APP_USER_PROFILE("UPDATE qbis_users SET qbis_users.first_name =?, qbis_users.last_name =?,qbis_users.mobile=?, qbis_users.dob=?, qbis_users.profile_img = CASE WHEN ISNULL(?) THEN qbis_users.profile_img ELSE ? END,qbis_users.about=?,qbis_users.modifyed_date= CURRENT_TIMESTAMP() WHERE qbis_users.user_id =?"),
		UPDATE_USER_PROFILE("UPDATE qbis_users SET qbis_users.first_name =?, qbis_users.last_name =?,qbis_users.mobile=?, qbis_users.dob=?,qbis_users.profile_img = CASE WHEN ISNULL(?) THEN qbis_users.profile_img ELSE ? END,qbis_users.about=?,qbis_users.modifyed_by=?,qbis_users.modifyed_date= CURRENT_TIMESTAMP(),qbis_users.role_modifyed_by = CASE WHEN ISNULL(?) THEN qbis_users.role_modifyed_by ELSE ? END, qbis_users.role_modifyed_date = CASE WHEN ISNULL(?) THEN qbis_users.role_modifyed_date ELSE CURRENT_TIMESTAMP() END,qbis_users.system_language=?,qbis_users.school_name=?,qbis_users.class=? WHERE qbis_users.user_id =?"),
		GET_QUESTION_DETAIL("SELECT qbis_quest.question_id, question_section_mapping.question_marks, question_section_mapping.negative_mark,qbis_quest.question_type,qbis_quest.answer_value FROM qbis_quest INNER JOIN question_section_mapping ON qbis_quest.question_id = question_section_mapping.question_id WHERE question_section_mapping.question_id=? AND question_section_mapping.section_id=?"),
		SAVE_USER_QUESTION_ATTEMPT("INSERT INTO user_question_attempt(user_section_attempt_pk,qbis_quest_question_id,marks,is_correct,is_favorite,notes,answer_value) VALUES(?,?,?,?,?,?,?)"),
		SAVE_USER_ANSWER_ATTEMPT("INSERT INTO user_attempt_answer(user_question_attempt_pk,qbis_option_id,subjective_ans) VALUES(?,?,?)"),
		SAVE_USER_TEST_ATTEMPT_REST("UPDATE  user_test_attempt set obtain_marks=?,correct_que_attempt=?,wrong_que_attempt=?,correct_que_score=?,wrong_que_score=?,unattampt_que=?,time_taken=?,ststus=? WHERE  user_test_attempt.pk=?"),
		GET_OPTIONS_BY_QUESTIONID("SELECT qbis_options.pk, CONVERT(qbis_options.option_name USING utf8) AS option_name, CHAR(qbis_options.option_position+64) AS option_position, qbis_options.correct_answer_flag FROM qbis_options WHERE  qbis_options.question_id=?"),
		GET_MY_TESTS_BY_USERID_TESTID("SELECT qbis_test.test_id, user_test_attempt.obtain_marks, qbis_test.total_marks, user_test_attempt.time_taken, DATE_FORMAT(user_test_attempt.test_given_time,'%d-%m-%Y %H:%i:%s') AS 'lastAttempt',user_test_attempt.pk,user_test_attempt.ststus,user_test_attempt.answer_json FROM user_test_attempt INNER JOIN qbis_test ON user_test_attempt.test_id = qbis_test.test_id WHERE user_test_attempt.user_id =? AND user_test_attempt.test_id=?"),
		GET_MY_TESTS_BY_USERID_WITH_PAGING("SELECT user_test_attempt.user_id,qbis_test.test_id, qbis_test.test_title,qbis_test.test_time_bound,qbis_users.mobile,qbis_users.user_email, DATE_FORMAT(qbis_test.created_date,'%d-%m-%Y %H:%i:%s') AS created_date,qbis_test.test_attempts,qbis_test.tags,Count(user_test_attempt.test_id) AS 'attemptCount',qbis_test.test_icon FROM user_test_attempt INNER JOIN qbis_test ON user_test_attempt.test_id = qbis_test.test_id INNER JOIN qbis_users ON qbis_users.user_id = qbis_test.user_id WHERE user_test_attempt.user_id=? GROUP BY user_test_attempt.test_id ORDER BY MAX(user_test_attempt.test_given_time) DESC LIMIT  ? OFFSET ?"),
		GET_QUESTIONS_NUMBER("SELECT COUNT(question_section_mapping.question_id) AS total_questions FROM  question_section_mapping INNER JOIN  qbis_section ON question_section_mapping.section_id = qbis_section.section_id WHERE qbis_section.test_id=?"),
		GET_ONE_TEST_DETAIL("SELECT qbis_test.test_id, qbis_test.test_title, qbis_test.test_desc, qbis_test.test_instruct, qbis_test.tags, qbis_test.test_attempts, qbis_test.negative_mark, qbis_test.test_time_bound, qbis_test.test_adaptive, qbis_organization.org_Name, qbis_users.mobile, qbis_test.test_pause, qbis_test.shuffling, qbis_test.test_review, qbis_test.org_id, qbis_test.total_marks, qbis_test.status, qbis_test.published, qbis_test.shared, qbis_test.is_public, qbis_test.is_review, qbis_test.review_with_correct,COUNT(question_section_mapping.question_id) as count, FLOOR(TIME_TO_SEC(qbis_test.test_time_bound)/60) as timeMinute,qbis_test.user_id  FROM qbis_test INNER JOIN qbis_organization ON qbis_organization.org_id = qbis_test.org_id INNER JOIN qbis_users ON qbis_test.user_id = qbis_users.user_id INNER JOIN qbis_section ON qbis_section.test_id=qbis_test.test_id INNER JOIN question_section_mapping ON question_section_mapping.section_id=qbis_section.section_id WHERE qbis_test.test_id=? AND qbis_test.published=1 GROUP BY qbis_test.test_id"),
		GET_TEST_DESC_FOR_RANDOM("SELECT test_desc from qbis_test where test_id=?"),
		COUNT_TOTAL_PUBLISHED_TEST("SELECT COUNT(DISTINCT qbis_test.test_id) AS total_test FROM qbis_test INNER JOIN qbis_users ON qbis_test.user_id = qbis_users.user_id LEFT JOIN user_test_mapping ON qbis_test.test_id = user_test_mapping.test_id WHERE qbis_test.published=? AND qbis_test.is_public=0 AND qbis_users.org_id=? AND qbis_test.shared = CASE WHEN (user_test_mapping.user_id = ?) THEN 1 ELSE 0 END"),
		COUNT_TOTAL_PUBLISHED_TEST_BY_USERID("SELECT COUNT(test_id) AS total_test FROM qbis_test WHERE qbis_test.published=? AND qbis_test.is_public=0 AND qbis_test.user_id=?"),
		COUNT_TOTAL_UPCOMING_TEST("SELECT COUNT(DISTINCT qbis_test.test_id) AS total_test FROM qbis_test INNER JOIN qbis_users ON qbis_test.user_id = qbis_users.user_id LEFT JOIN user_test_mapping ON qbis_test.test_id = user_test_mapping.test_id WHERE qbis_test.published=? AND qbis_test.is_public=0 AND qbis_users.org_id=? AND qbis_test.shared = CASE WHEN (user_test_mapping.user_id = ?) THEN 1 ELSE 0 END AND qbis_test.schedule_publish_date BETWEEN CURDATE() AND CURDATE() + INTERVAL 3 DAY"),
		GET_GIVEN_TEST_ANS_JSON("SELECT user_test_attempt.answer_json FROM user_test_attempt where user_test_attempt.pk=?"),
		COUNT_TOTAL_GIVEN_TEST_BY_USERID("SELECT COUNT(distinct qbis_test.test_id) AS total_test FROM user_test_attempt INNER JOIN qbis_test ON user_test_attempt.test_id = qbis_test.test_id INNER JOIN qbis_users ON qbis_users.user_id = qbis_test.user_id WHERE user_test_attempt.user_id=?"),
		SAVE_ENROLLMENT_IN_COURSE_ASSESSMENT("INSERT  INTO course_assessment(course_id, user_id, isEnroll, enroll_date_time) VALUES(?,?,?,?)"),
	    SAVE_RECENT_VIEW_COURSES("INSERT INTO recently_viewed_course(recently_viewed_course.user_id,recently_viewed_course.course_id) VALUES(?,?)"),
	    SAVE_CONTENT_SECTION_MAPPING("INSERT INTO content_section_mapping(content_id,section_id,title,attempt_id,session_id) VALUES(?,?,?,?,?)"),
	    SAVE_CONTENT_SECTION_MAPPING1("INSERT INTO content_section_mapping(content_id,section_id,title,attempt_id,session_id) VALUES(?,?,?,?,?)"),
	    /*	   
	    /*	    SAVE_CONTENT_SECTION_MAPPING2("INSERT INTO content_section_mapping(content_id,section_id,title) VALUES(?,?,?)"),
*/	    DELETE_CONTENT_SECTION_MAPPING_BY_SECTIONID("DELETE FROM content_section_mapping WHERE content_section_mapping.section_id=?"),
	    DELETE_CONTENT_SECTION_MAPPING_BY_CONTENTID("DELETE FROM content_section_mapping  WHERE content_section_mapping.content_id=? AND content_section_mapping.section_id=?"),
	    GET_SUB_DOMAIN_BY_USER_EMAIL("SELECT qbis_users.user_id, qbis_organization.org_subdomain,qbis_users.org_id, license_company_details.license_id FROM qbis_users LEFT JOIN qbis_organization ON qbis_users.org_id = qbis_organization.org_id  LEFT JOIN license_company_details ON license_company_details.company_id = qbis_organization.org_id WHERE qbis_users.user_email = ?;"),
	    //GET_UPLOADED_CONTENT_LIST("SELECT content_id, content_name, content, additional_info, course_content_manager.content_type_id, content_order, no_of_pages, uploaded_by,qbis_users.user_email,visibility,description, content_type.type_name FROM course_content_manager INNER JOIN content_type ON content_type.content_type_id=course_content_manager.content_type_id LEFT JOIN qbis_users ON qbis_users.user_id=course_content_manager.uploaded_by WHERE course_content_manager.uploaded_by=? ORDER BY course_content_manager.uploaded_datetime DESC"),
	    //GET_UPLOADED_CONTENT_LIST("SELECT course_content_manager.content_id, course_content_manager.content_name, course_content_manager.content, additional_info, course_content_manager.content_type_id, content_order, no_of_pages, course_content_manager.uploaded_by, qbis_users.user_email, course_content_manager.visibility, course_content_manager.description, content_type.type_name, DATE_FORMAT(course_content_manager.uploaded_datetime,'%d-%m-%Y') as uploaded_datetime, GROUP_CONCAT(course_manager.title) as 'coursemapped' FROM course_content_manager INNER JOIN content_type ON content_type.content_type_id = course_content_manager.content_type_id LEFT JOIN qbis_users ON qbis_users.user_id = course_content_manager.uploaded_by LEFT JOIN content_section_mapping ON content_section_mapping.content_id = course_content_manager.content_id LEFT JOIN course_section_manager ON course_section_manager.section_id=content_section_mapping.section_id LEFT JOIN course_manager ON course_manager.course_id=course_section_manager.course_id WHERE course_content_manager.uploaded_by =? GROUP BY course_content_manager.content_id ORDER BY course_content_manager.uploaded_datetime DESC"),
	    GET_UPLOADED_CONTENT_LIST("SELECT course_content_manager.content_id, course_content_manager.content_name, course_content_manager.content, additional_info, course_content_manager.content_type_id, content_order, no_of_pages, course_content_manager.uploaded_by, qbis_users.user_email, course_content_manager.visibility, course_content_manager.description, content_type.type_name, DATE_FORMAT(course_content_manager.uploaded_datetime,'%d-%m-%Y') as uploaded_datetime, GROUP_CONCAT(distinct course_manager.title) as 'coursemapped',course_content_manager.is_external_url,course_content_manager.file_size,IFNULL(qbis_video_content_map.content_id,0),IFNULL(qbis_content_audio.content_id,0) FROM course_content_manager INNER JOIN content_type ON content_type.content_type_id = course_content_manager.content_type_id LEFT JOIN qbis_users ON qbis_users.user_id = course_content_manager.uploaded_by LEFT JOIN content_section_mapping ON content_section_mapping.content_id = course_content_manager.content_id LEFT JOIN course_section_manager ON course_section_manager.section_id=content_section_mapping.section_id LEFT JOIN course_manager ON course_manager.course_id=course_section_manager.course_id LEFT JOIN qbis_video_content_map ON qbis_video_content_map.content_id=course_content_manager.content_id LEFT JOIN qbis_content_audio ON qbis_content_audio.content_id=course_content_manager.content_id WHERE course_content_manager.uploaded_by =?  AND course_content_manager.content_type_id!=2 "),
        GET_SUGGESTION_CONTENT_LIST("SELECT distinct course_content_manager.content_id, course_content_manager.content_name, course_content_manager.content, additional_info, course_content_manager.content_type_id, content_type.type_name,DATE_FORMAT(course_content_manager.uploaded_datetime,'%d-%m-%Y') as uploaded_datetime, content_type.icon_path FROM course_content_manager INNER JOIN content_type ON content_type.content_type_id = course_content_manager.content_type_id INNER JOIN content_section_mapping ON course_content_manager.content_id = content_section_mapping.content_id INNER JOIN course_section_manager ON content_section_mapping.section_id = course_section_manager.section_id INNER JOIN course_manager ON course_manager.course_id = course_section_manager.course_id WHERE course_manager.user_id = ? AND content_section_mapping.content_id NOT IN (select content_section_mapping.content_id FROM content_section_mapping INNER JOIN course_section_manager ON content_section_mapping.section_id = course_section_manager.section_id INNER JOIN course_manager ON course_manager.course_id = course_section_manager.course_id WHERE course_manager.course_id = ?)"),
	    
        SAVE_UPLOAD_CONTENT_DETAILS("INSERT INTO course_content_manager(content_name,content,content_type_id,no_of_pages,uploaded_by,visibility,description,file_size, status,video_duration) VALUES(?,?,?,?,?,?,?,?,?,?)"),
        SAVE_UPLOAD_CONTENT_DETAILS1("INSERT INTO course_content_manager(content_name,content,content_type_id,no_of_pages,uploaded_by,visibility,description,file_size, status) VALUES(?,?,?,?,?,?,?,?,?)"),
        
        SET_CONTENT_BY_CONTENTID("UPDATE course_content_manager SET course_content_manager.content_name=?, no_of_pages=? WHERE content_id=?"),
        FIND_ONE_UPLOAD_CONTENT("SELECT course_content_manager.content_id, course_content_manager.content_name, course_content_manager.content, course_content_manager.additional_info, course_content_manager.content_type_id, course_content_manager.content_order, course_content_manager.no_of_pages, course_content_manager.uploaded_by, course_content_manager.visibility, course_content_manager.description, content_type.type_name,course_content_manager.is_external_url,course_content_manager.file_size, content_type.icon_path FROM course_content_manager INNER JOIN content_type ON content_type.content_type_id=course_content_manager.content_type_id WHERE course_content_manager.content_id = ?"),
        UPDATE_UPLOAD_CONTENT("UPDATE course_content_manager SET content_name=?,content=CASE WHEN ISNULL(?) THEN content ELSE ? END,content_type_id=CASE WHEN ISNULL(?) THEN content_type_id ELSE ? END,no_of_pages=?,uploaded_by=?,visibility=?,description=?,modified_date=?,file_size=? WHERE course_content_manager.content_id=?"),
        DELETE_UPLOADCONTENT_BY_CONTENTID("DELETE FROM course_content_manager where course_content_manager.content_id=?"),
        CHECK_CONTENT_BEFORE_DELETE("SELECT content_section_mapping.content_id FROM content_section_mapping WHERE content_section_mapping.content_id=?"),
        SAVE_QUESTION_IN_QUESTION_BANK("INSERT INTO qbis_quest(question_txt,question_type,answer_explanation,user_id,is_formula,math_formula,is_parent,answer_value,question_setting) values(?,?,?,?,?,?,?,?,?)"),
        GET_QUESTIONS_BY_USER_ID("SELECT qbis_quest.question_id, CONVERT(qbis_quest.question_txt using UTF8) AS question_title,question_type.type_name,DATE_FORMAT(qbis_quest.created_date,'%d-%m-%Y') AS created_date, count(question_section_mapping.question_id) as count, GROUP_CONCAT(qbis_test.test_title) as 'testmapped',qbis_quest.question_type FROM qbis_quest INNER JOIN question_type ON qbis_quest.question_type = question_type.pk LEFT JOIN question_section_mapping on qbis_quest.question_id = question_section_mapping.question_id left join qbis_section on question_section_mapping.section_id=qbis_section.section_id left join qbis_test on qbis_test.test_id= qbis_section.test_id WHERE qbis_quest.user_id=? GROUP BY qbis_quest.question_id ORDER BY qbis_quest.created_date DESC"),
        GET_QUESTIONS_BY_USER_ID_FOR_SERVERSIDE_PROCESSING("SELECT qbis_quest.question_id, CONVERT(qbis_quest.question_txt using UTF8) AS question_title,question_type.type_name,DATE_FORMAT(qbis_quest.created_date,'%d-%m-%Y') AS created_date, count(question_section_mapping.question_id) as count, GROUP_CONCAT(qbis_test.test_title) as 'testmapped',qbis_quest.question_type FROM qbis_quest INNER JOIN question_type ON qbis_quest.question_type = question_type.pk LEFT JOIN question_section_mapping on qbis_quest.question_id = question_section_mapping.question_id left join qbis_section on question_section_mapping.section_id=qbis_section.section_id left join qbis_test on qbis_test.test_id= qbis_section.test_id WHERE qbis_quest.user_id=?"),
        GET_QUESTIONS_BY_USER_ID_FOR_IMPORT_FOR_SERVERSIDE_PROCESSING("SELECT qbis_quest.question_id, CONVERT(qbis_quest.question_txt using UTF8) AS question_title,question_type.type_name,DATE_FORMAT(qbis_quest.created_date,'%d-%m-%Y') AS created_date,count(question_section_mapping.question_id) as count, GROUP_CONCAT(qbis_test.test_title) as 'testmapped',qbis_quest.question_type FROM qbis_quest INNER JOIN question_type ON qbis_quest.question_type = question_type.pk LEFT JOIN question_section_mapping on qbis_quest.question_id = question_section_mapping.question_id left join qbis_section on question_section_mapping.section_id=qbis_section.section_id left join qbis_test on qbis_test.test_id= qbis_section.test_id  WHERE qbis_quest.user_id=? AND qbis_quest.is_parent=0"),
        GET_QUESTIONS_BY_USER_ID_FOR_IMPORT("SELECT qbis_quest.question_id, CONVERT(qbis_quest.question_txt using UTF8) AS question_title,question_type.type_name,DATE_FORMAT(qbis_quest.created_date,'%d-%m-%Y') AS created_date,count(question_section_mapping.question_id) as count FROM qbis_quest INNER JOIN question_type ON qbis_quest.question_type = question_type.pk LEFT JOIN question_section_mapping on qbis_quest.question_id = question_section_mapping.question_id WHERE qbis_quest.user_id=? AND qbis_quest.is_parent=0 GROUP BY qbis_quest.question_id ORDER BY qbis_quest.created_date DESC"),
        GET_QUESTION_BY_QUESTION_ID("SELECT qbis_quest.question_id, CONVERT(qbis_quest.question_txt using UTF8) AS question_title,qbis_quest.answer_explanation, qbis_quest.question_type,is_formula, CONVERT(qbis_quest.math_formula using UTF8) AS math_formula,qbis_quest.answer_value,qbis_quest.question_setting FROM qbis_quest WHERE qbis_quest.question_id NOT IN (SELECT question_section_mapping.question_id FROM question_section_mapping) AND qbis_quest.question_id=? AND qbis_quest.user_id=?"),
        UPDATE_QUESTION_DETAIL("UPDATE qbis_quest SET question_txt=?,question_type=?,answer_explanation=?,is_formula=?,math_formula=?,answer_value=?,question_setting=?, created_date=now() WHERE qbis_quest.question_id=? AND qbis_quest.user_id=?"),
        DELETE_OPTIONS_BY_QUES_ID("DELETE FROM qbis_options WHERE qbis_options.question_id=?"),
        DELETE_SUB_OPTIONS_BY_QUES_ID("DELETE FROM qbis_sub_options WHERE qbis_sub_options.question_id=?"),
        DELETE_QUESTIONDATA_BY_QUES_ID("DELETE FROM qbis_quest WHERE qbis_quest.question_id NOT IN (SELECT question_section_mapping.question_id FROM question_section_mapping) AND qbis_quest.question_id=? AND qbis_quest.user_id=?"),  
        GET_QUESTION_FOR_PREVIEW("SELECT qbis_quest.question_id, CONVERT(qbis_quest.question_txt using UTF8) AS question_title,qbis_quest.answer_explanation, qbis_quest.question_type, is_formula, CONVERT(qbis_quest.math_formula using UTF8) AS math_formula, qbis_quest.is_parent, qbis_quest.answer_value, qbis_quest.question_setting FROM qbis_quest WHERE qbis_quest.question_id=? AND qbis_quest.user_id=?"),
        //CONTENT_LIST_NOT_IN_SECTION("SELECT content_id, content_name, content, additional_info, course_content_manager.content_type_id, content_order, no_of_pages, uploaded_by,qbis_users.user_email,visibility,description, content_type.type_name FROM course_content_manager INNER JOIN content_type ON content_type.content_type_id=course_content_manager.content_type_id LEFT JOIN qbis_users ON qbis_users.user_id=course_content_manager.uploaded_by WHERE course_content_manager.uploaded_by=? AND course_content_manager.content_id NOT IN(SELECT content_section_mapping.content_id FROM content_section_mapping WHERE section_id=?) ORDER BY course_content_manager.uploaded_datetime DESC"),
        CONTENT_LIST_NOT_IN_SECTION("SELECT content_id, content_name, content, additional_info, course_content_manager.content_type_id, content_order, no_of_pages, uploaded_by,qbis_users.user_email,visibility,description, content_type.type_name FROM course_content_manager INNER JOIN content_type ON content_type.content_type_id=course_content_manager.content_type_id LEFT JOIN qbis_users ON qbis_users.user_id=course_content_manager.uploaded_by WHERE course_content_manager.uploaded_by=? AND course_content_manager.content_type_id!=2 AND course_content_manager.status = ? ORDER BY course_content_manager.uploaded_datetime DESC"),
        //FIND_ALL_CONTENT_TYPE("SELECT content_type.content_type_id, content_type.type_name, content_type.mimetype, content_type.extension, content_type.is_active, content_type.is_global, content_type.icon_path FROM content_type ORDER BY content_type.type_name"),
        FIND_ALL_CONTENT_TYPE("SELECT content_type.content_type_id, content_type.type_name, content_type.mimetype, content_type.extension, content_type.is_active, content_type.is_global, content_type.icon_path FROM content_type GROUP BY content_type.type_name ORDER BY content_type.type_name"),
        INSERT_QUESTION_MAP("INSERT INTO question_section_mapping (section_id, question_id, question_order,question_marks,negative_mark) VALUES(?,?,?,?,?)"),
        REMOVE_QUESTION_MAPPING("DELETE FROM question_section_mapping WHERE question_section_mapping.section_id=?"),
        UPDATE_TITLE_CONTENT_SECTION_MAPPING("UPDATE  content_section_mapping SET content_section_mapping.title=? WHERE content_section_mapping.content_id=? AND content_section_mapping.section_id=?"),
        REMOVE_QUES_MAPPING_FROM_TEST("DELETE question_section_mapping FROM question_section_mapping INNER JOIN qbis_section ON question_section_mapping.section_id = qbis_section.section_id RIGHT JOIN qbis_test ON qbis_test.test_id = qbis_section.test_id WHERE qbis_test.test_id=? AND qbis_test.user_id=?"),
        GET_TEST_SETTING("SELECT qbis_test.test_id, qbis_test.test_title, qbis_test.test_desc, qbis_test.test_instruct, qbis_test.tags, qbis_test.test_attempts, qbis_test.negative_mark,FLOOR(TIME_TO_SEC(qbis_test.test_time_bound)/60) as timeMinute, qbis_test.test_adaptive, qbis_test.test_pause, qbis_test.is_public, qbis_test.is_question_mark_same, qbis_test.every_ques_mark,qbis_test.is_review,qbis_test.review_with_correct,qbis_test.shuffle_section,qbis_test.shuffle_question, qbis_test.shuffle_option, qbis_test.test_icon FROM qbis_test WHERE qbis_test.test_id=? AND qbis_test.user_id=?"),
        GET_QUES_IDS_MAP_WITH_TEST("SELECT question_section_mapping.question_id,question_section_mapping.question_order,question_section_mapping.section_id FROM question_section_mapping INNER JOIN  qbis_section ON question_section_mapping.section_id=qbis_section.section_id INNER JOIN qbis_test ON qbis_section.test_id=qbis_test.test_id WHERE qbis_test.test_id=? AND qbis_test.user_id=?"),
        INSERT_COURSE_TITLE("INSERT INTO course_manager(course_manager.title, course_manager.sub_title,course_manager.user_id,course_manager.level_id,course_manager.language_id,course_manager.modified_date) VALUES(?,?,?,1,1,now())"),
        DEL_CON_SEC_MAP_BY_COURSEID("DELETE content_section_mapping FROM content_section_mapping INNER JOIN course_section_manager ON course_section_manager.section_id = content_section_mapping.section_id INNER JOIN course_manager ON course_manager.course_id = course_section_manager.course_id AND course_manager.course_id=?"),
        DEL_SECTION_BY_COURSEID("Delete from course_section_manager where course_section_manager.course_id=?"),
        DEL_COURSE_BY_COURSEID("Delete from course_manager where course_manager.course_id=? AND course_manager.published=0"),
        GET_SECTION_LIST_ALL("SELECT course_section_manager.section_id, course_section_manager.section_name,course_section_manager.is_practice, course_manager.title as coursename FROM course_section_manager INNER JOIN course_manager ON course_section_manager.course_id = course_manager.course_id WHERE course_manager.user_id = ? AND course_manager.course_id!=?  ORDER BY course_manager.course_id DESC"),
        COUNT_TOTAL_CONTENT_OF_SECTION("SELECT COUNT(course_content_manager.content_type_id) AS total_contents, content_type.type_name FROM course_section_manager INNER JOIN content_section_mapping ON content_section_mapping.section_id = course_section_manager.section_id INNER JOIN course_content_manager ON course_content_manager.content_id = content_section_mapping.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id WHERE course_section_manager.section_id = ? GROUP BY content_type.type_name"),
        FIND_ONE_SECTION("SELECT course_section_manager.section_id, course_section_manager.section_name, course_section_manager.course_id, (SELECT GROUP_CONCAT(content_section_mapping.content_id) FROM content_section_mapping WHERE content_section_mapping.section_id = ?) as contentId, course_section_manager.published, course_section_manager.start_date, course_section_manager.end_date, course_section_manager.order, course_section_manager.quiz_mandatory, course_section_manager.passing_criteria, course_section_manager.min_time_spent FROM course_section_manager WHERE course_section_manager.section_id=?"),
        GET_MAPPED_CONTENT_BY_SECTION_ID("SELECT content_section_mapping.content_id FROM content_section_mapping WHERE section_id =?"),
        GET_ATTEMPTED_TESTS_BY_USERID("SELECT qbis_test.test_id, user_test_attempt.obtain_marks, qbis_test.total_marks, user_test_attempt.time_taken, DATE_FORMAT(user_test_attempt.test_given_time,'%d-%m-%Y %H:%i:%s') AS 'lastAttempt',user_test_attempt.pk,user_test_attempt.ststus,qbis_test.test_title FROM user_test_attempt INNER JOIN qbis_test ON user_test_attempt.test_id = qbis_test.test_id WHERE user_test_attempt.user_id =? ORDER BY user_test_attempt.test_given_time DESC"),
        TOTAL_TEST_COUNT("SELECT COUNT(qbis_test.test_id) FROM qbis_test"),
        TOTAL_COURSE_COUNT("SELECT COUNT(course_manager.course_id) FROM course_manager"),
        UPDATE_TEST_ICON("UPDATE qbis_test SET qbis_test.test_icon=? WHERE qbis_test.test_id=? AND qbis_test.user_id=?"),
        UPDATE_COURSE_ICON_NAME("UPDATE course_manager SET course_manager.featured_image=? WHERE course_manager.course_id=? AND course_manager.user_id=?"),
        CHECK_TEST_STATUS("SELECT qbis_test.published FROM qbis_test WHERE qbis_test.test_id=?"),
        CHECK_DRAFTED_CONTENT_IN_COURSE("SELECT course_content_manager.content_id FROM course_content_manager INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id INNER JOIN content_section_mapping ON content_section_mapping.content_id = course_content_manager.content_id INNER JOIN course_section_manager ON course_section_manager.section_id = content_section_mapping.section_id INNER JOIN course_manager ON course_manager.course_id = course_section_manager.course_id INNER JOIN qbis_test ON course_content_manager.content = qbis_test.test_id WHERE content_type.content_type_id = 2 AND course_manager.course_id =? AND qbis_test.published =0"),
        GET_USER_LIST("SELECT user_id, first_name, last_name, mobile, user_email,registration_id,role_id FROM qbis_users"),
        GET_ALL_STUDENT_LIST("SELECT user_id, first_name, last_name, mobile, user_email,registration_id FROM qbis_users WHERE qbis_users.role_id=4"),
        GET_USER_LIST_BY_CREATERID("SELECT qbis_users.user_id,qbis_users.first_name,qbis_users.last_name,qbis_users.mobile,qbis_users.user_email,qbis_users.registration_id,qbis_users.status,roles.roleName FROM qbis_users Inner Join roles ON qbis_users.permissionId = roles.roleId WHERE qbis_users.created_by=?"),
        GET_USER_LIST_BASED_ON_USER_ROLE("SELECT qbis_users.user_id,qbis_users.first_name,qbis_users.last_name,qbis_users.mobile,qbis_users.user_email,qbis_users.registration_id,qbis_users.status,roles.roleName FROM qbis_users Inner Join roles ON qbis_users.permissionId = roles.roleId WHERE qbis_users.created_by = ? OR qbis_users.org_id = ? AND CASE WHEN ISNULL(?) THEN qbis_users.user_id!= ? ELSE  qbis_users.permissionId = ? END"),
        GET_USER_LIST_BY_CREATERID_ROLEID("SELECT user_id, first_name, last_name, mobile, user_email,registration_id,status FROM qbis_users WHERE qbis_users.created_by=? AND qbis_users.permissionId=?"),
        GET_USER_LIST_BY_ORGID_ROLEID("SELECT user_id, first_name, last_name, mobile, user_email,registration_id,status FROM qbis_users WHERE qbis_users.org_id=? AND qbis_users.permissionId=?"),
        GET_ATTEMPT_RESULT_USER_BY_MONTH("SELECT CASE WHEN (user_test_attempt.obtain_marks*100/qbis_test.total_marks)<33 THEN 'fail' ELSE 'pass' END as 'result' FROM user_test_attempt INNER JOIN qbis_test ON user_test_attempt.test_id = qbis_test.test_id WHERE user_test_attempt.user_id=? AND user_test_attempt.test_given_time BETWEEN ? AND ?"),
        SAVE_QUESTION_NOTES_BY_USER("INSERT INTO  user_questions_notes( user_questions_notes.question_id, user_questions_notes.user_id, user_questions_notes.test_attempt_id, user_questions_notes.note_text) VALUES(?,?,?,?)"),
        GET_QUESTION_NOTES_BY_USER("SELECT user_questions_notes.note_text, user_questions_notes.id, user_questions_notes.question_id, user_questions_notes.user_id, user_questions_notes.test_attempt_id, user_questions_notes.created_date FROM user_questions_notes WHERE user_questions_notes.user_id=? AND user_questions_notes.question_id=? AND user_questions_notes.test_attempt_id=?"),
        UPDATE_QUESTION_NOTES_BY_USER("UPDATE  user_questions_notes SET user_questions_notes.note_text	= ?	 WHERE user_questions_notes.id =?"),
        UPDATE_SECTION_DETAILS("UPDATE qbis_section SET section_name=? WHERE qbis_section.section_id = ? AND qbis_section.test_id = ?"),
        DELETE_TEST_SECTION("DELETE qbis_section FROM qbis_section INNER JOIN qbis_test ON qbis_test.test_id = qbis_section.test_id WHERE qbis_test.test_id=? AND qbis_section.section_id=?"),
        UPDATE_QUES_MAPPING_DETAIL_ON_TEST_UPDATE("UPDATE question_section_mapping  INNER JOIN qbis_section ON question_section_mapping.section_id = qbis_section.section_id INNER JOIN qbis_test ON qbis_test.test_id = qbis_section.test_id SET question_section_mapping.question_marks = ?, question_section_mapping.negative_mark = ? WHERE qbis_test.test_id = ?"),
        UPDATE_QUES_NEG_MARK_ON_TEST_UPDATE("UPDATE question_section_mapping  INNER JOIN qbis_section ON question_section_mapping.section_id = qbis_section.section_id INNER JOIN qbis_test ON qbis_test.test_id = qbis_section.test_id SET question_section_mapping.negative_mark = TRUNCATE(question_section_mapping.question_marks * ?/100, 2) WHERE qbis_test.test_id = ?"),
        GET_SECTIONLIST_BY_USERID("SELECT qbis_section.section_id, qbis_section.section_name, qbis_section.test_id, qbis_test.test_title, qbis_section.sequence FROM qbis_section INNER JOIN qbis_test ON qbis_test.test_id = qbis_section.test_id WHERE qbis_test.user_id = ? AND qbis_test.test_id!=?"),
        GET_SECTION_DETAIL_BY_SECTION_ID("SELECT qbis_section.section_id, qbis_section.section_name, qbis_section.test_id, qbis_section.sequence FROM qbis_section WHERE qbis_section.section_id=?"),
        SAVE_QUESTION_FAVORIATE_BY_USER("INSERT INTO  user_question_favorites( user_question_favorites.question_id, user_question_favorites.user_id, user_question_favorites.is_favorites) VALUES(?,?,?)"),
        UPDATE_QUESTION_FAVORIATE_BY_USER("UPDATE  user_question_favorites SET  user_question_favorites.is_favorites=? WHERE  user_question_favorites.question_id=? AND user_question_favorites.user_id=?"),
        CHECK_FAVORITE_QUES("SELECT user_question_favorites.id, user_question_favorites.is_favorites FROM user_question_favorites WHERE user_question_favorites.question_id=? AND user_question_favorites.user_id=?"),
        SAVE_CONTENT_FAVORIATE_BY_USER("INSERT INTO  user_content_favorites( user_content_favorites.content_id, user_content_favorites.user_id, user_content_favorites.is_favorites) VALUES(?,?,?)"),
        UPDATE_CONTENT_FAVORIATE_BY_USER("UPDATE  user_content_favorites SET  user_content_favorites.is_favorites=? WHERE  user_content_favorites.content_id=? AND user_content_favorites.user_id=?"),
        CHECK_FAVORITE_CONTENT("SELECT user_content_favorites.id, user_content_favorites.is_favorites FROM user_content_favorites WHERE user_content_favorites.content_id=? AND user_content_favorites.user_id=?"),
        LIST_QUESTION_NOTES_BY_USERID("SELECT qbis_quest.question_txt, user_questions_notes.note_text,user_questions_notes.id, user_questions_notes.question_id, user_questions_notes.test_attempt_id, user_questions_notes.created_date FROM user_questions_notes INNER JOIN qbis_quest ON qbis_quest.question_id = user_questions_notes.question_id WHERE user_questions_notes.user_id=? ORDER BY user_questions_notes.created_date DESC"),
        LIST_FAVORITE_CONTENT_BY_USERID("SELECT course_content_manager.content_name, course_content_manager.content, content_type.type_name FROM user_content_favorites INNER JOIN course_content_manager ON course_content_manager.content_id = user_content_favorites.content_id INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id WHERE user_content_favorites.user_id=? AND user_content_favorites.is_favorites=1 ORDER BY user_content_favorites.created_date DESC"),
        LIST_FAVORITE_QUESTION_BY_USERID("SELECT qbis_quest.question_id, qbis_quest.question_txt FROM user_question_favorites INNER JOIN qbis_quest ON qbis_quest.question_id = user_question_favorites.question_id WHERE user_question_favorites.user_id=? AND user_question_favorites.is_favorites=1 ORDER BY user_question_favorites.created_date DESC"),
        SAVE_USER_SECTION_ATTEMPT("INSERT INTO user_section_attempt (user_test_attempt_pk,section_id,user_id) VALUES(?,?,?)"),
        UPDATE_USER_SECTION_ATTEMPT("UPDATE user_section_attempt SET obtain_marks=?, correct_que_attempt=?, wrong_que_attempt=?, correct_que_score=?, wrong_que_score=?, unattempt_que=?, time_taken=?, status=? WHERE user_section_attempt.pk=?"),
        CHECK_REGISTRAION_ID("SELECT qbis_users.registration_id FROM qbis_users WHERE qbis_users.user_id = ?"),
        SET_REGISTRATIONID_BY_USERID("UPDATE  qbis_users SET qbis_users.registration_id=?  WHERE qbis_users.user_id=?"),
        CHECK_TEST_SCHEDULE_TIME_EXPIRE("SELECT test_id FROM qbis_test WHERE qbis_test.is_schedule = 1 AND qbis_test.schedule_publish_date <=NOW() AND qbis_test.test_id = ?"),
        CHECK_COURSE_SCHEDULE_TIME_EXPIRE("SELECT course_id FROM course_manager WHERE course_manager.is_scheduled = 1 AND course_manager.schedule_publish_date <=NOW() AND course_manager.course_id = ?"),
        CHECK_COURSE_IS_SCHEDULE("SELECT course_id FROM course_manager WHERE course_manager.is_scheduled = 1 AND course_manager.course_id = ?"),
        CHANGE_PUBLISH_STATUS_OF_SCHEDULE_COURSE("UPDATE course_manager SET published=1,published_on=NOW(),modified_date=NOW() WHERE course_manager.published=2 AND course_manager.schedule_publish_date = NOW()"),
        GET_INCOMPLETE_PROFILE_USER_LIST("SELECT qbis_users.user_id, if(qbis_users.last_name is NULL,qbis_users.first_name,CONCAT(qbis_users.first_name,' ',qbis_users.last_name)) as 'name', qbis_users.registration_id FROM qbis_users WHERE qbis_users.first_name IS  NULL  AND qbis_users.role_id=4"),
        INSERT_NOTIFICATION("INSERT INTO notification(notification.notification,notification.url,notification.image) VALUES(?,?,?)"),
        UPDATE_NOTIFICATION("UPDATE notification SET notification.url=? WHERE notification.id=?"),
        INSERT_NOTIFICATION_TARGET("INSERT INTO notification_target(notification_target.notification_id,notification_target.target_id) VALUES(?,?)"),
        DRAFTED_COURSE_FROM_LONG_PERIOD("SELECT course_manager.course_id, course_manager.user_id, course_manager.title, qbis_users.first_name FROM course_manager INNER JOIN qbis_users ON course_manager.user_id = qbis_users.user_id WHERE course_manager.published = 0"),
        NOTIFICATION_LIST_BY_USERID("SELECT notification_target.target_id, notification.notification, notification.url, notification.id,notification.image FROM notification INNER JOIN notification_target ON notification_target.notification_id = notification.id WHERE notification_target.target_id=? AND notification_target.read_status=0"),
        UPDATE_NOTIFICATION_STATUS("UPDATE notification_target SET notification_target.read_status=? WHERE notification_target.notification_id=?"),
        DRAFTED_TEST_FROM_LONG_PERIOD("SELECT qbis_test.test_id, qbis_test.user_id, qbis_test.test_title, qbis_users.first_name FROM qbis_test INNER JOIN qbis_users ON qbis_test.user_id = qbis_users.user_id WHERE qbis_test.published=0"),
        CHECK_ABUSE_CONTENT("SELECT user_content_abuse_report.id, user_content_abuse_report.report_text FROM user_content_abuse_report WHERE user_content_abuse_report.content_id =? AND user_content_abuse_report.user_id =?"),
        SAVE_CONTENT_ABUSETEXT_BY_USER("INSERT INTO  user_content_abuse_report(report_text,content_id,user_id,course_id) VALUES(?,?,?,?)"),
        UPDATE_CONTENT_ABUSETEXT_BY_USER("UPDATE  user_content_abuse_report SET report_text=? WHERE user_content_abuse_report.id=?"),
        GET_TEACHER_STUDENT_CONTENT_BY_ABUSE_REPORTID("SELECT course_content_manager.content_name, course_content_manager.content, teacher.first_name as 'teacher', qbis_users.first_name as 'student', user_content_abuse_report.content_id, teacher.user_id as 'teacherId', qbis_users.user_id as 'studentId', user_content_abuse_report.id FROM user_content_abuse_report INNER JOIN course_content_manager ON course_content_manager.content_id = user_content_abuse_report.content_id INNER JOIN qbis_users  teacher ON teacher.user_id = course_content_manager.uploaded_by INNER JOIN qbis_users ON qbis_users.user_id = user_content_abuse_report.user_id WHERE user_content_abuse_report.id=?"),
        ABUSE_REPORT_BY_CONTENT_ID("SELECT user_content_abuse_report.id, user_content_abuse_report.content_id, user_content_abuse_report.user_id, user_content_abuse_report.report_text, user_content_abuse_report.created_date, course_manager.title,course_manager.course_id FROM user_content_abuse_report INNER JOIN course_manager ON user_content_abuse_report.course_id = course_manager.course_id WHERE user_content_abuse_report.content_id = ? ORDER BY user_content_abuse_report.created_date DESC"),
        GET_ALL_COURSE_LIST_BY_USERID("SELECT course_manager.course_id, course_manager.title,course_manager.published FROM course_manager WHERE course_manager.user_id=? ORDER BY course_manager.created_date DESC"),
        GET_TOTAL_ACTIVE_USER_COUNT_BY_USERID("SELECT COUNT(qbis_users.user_id) FROM qbis_users WHERE qbis_users.created_by=? AND qbis_users.status=1"),
        GET_TEST_TAG_LIST("SELECT tags FROM qbis_test"),
        GET_COURSE_TAG_LIST("SELECT tags FROM course_manager"),
        GET_TEST_LIST_USING_FILTER("SELECT qbis_test.test_id,qbis_test.test_title,TIME_TO_SEC(qbis_test.test_time_bound) AS TIME, qbis_users.mobile,DATE_FORMAT(qbis_test.created_date,'%d-%m-%Y') AS created_date, DATE_FORMAT(qbis_test.published_date,'%d-%m-%Y') AS published_date, DATE_FORMAT(qbis_test.modified_date,'%d-%m-%Y') AS modified_date, DATE_FORMAT(qbis_test.schedule_publish_date,'%d-%m-%Y') AS schedule_date,qbis_test.published,qbis_test.test_attempts,qbis_test.test_desc,qbis_test.tags,qbis_test.test_instruct,qbis_test.is_public, qbis_test.is_review, qbis_test.review_with_correct, qbis_test.negative_mark, qbis_test.total_marks, qbis_test.test_pause, qbis_users.user_email, qbis_test.test_icon,count(user_test_attempt.user_id) AS total_appear FROM qbis_test INNER JOIN qbis_users ON qbis_test.user_id=qbis_users.user_id LEFT JOIN  user_test_attempt ON qbis_test.test_id=user_test_attempt.test_id"),
        GET_COURSE_LIST_USING_FILTER("SELECT course_manager.course_id, course_manager.title,course_manager.published, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags, difficulty_level.level_name, language_content.language_name, DATE_FORMAT(course_manager.created_date,'%d-%m-%Y') AS created_date, DATE_FORMAT(course_manager.created_date,'%H:%i:%s') AS created_time,course_manager.sub_title,(SELECT COUNT(course_assessment.course_id) FROM course_assessment WHERE course_assessment.course_id=course_manager.course_id) as enrollCount,course_manager.is_scheduled, DATE_FORMAT(course_manager.schedule_publish_date,'%d-%m-%Y') AS schedule_publish_date, DATE_FORMAT(course_manager.modified_date,'%d-%m-%Y') AS modified_date,DATE_FORMAT(course_manager.published_on,'%d-%m-%Y') AS published_date, qbis_users.user_email FROM course_manager INNER JOIN difficulty_level ON course_manager.level_id=difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id=language_content.language_id INNER JOIN qbis_users ON course_manager.user_id=qbis_users.user_id"),
        CHECK_USER_EMAIL_WITH_SUBDOMAIN("SELECT qbis_users.user_id FROM qbis_users INNER JOIN qbis_organization ON qbis_users.org_id = qbis_organization.org_id WHERE user_email = ? AND qbis_organization.org_subdomain = ?"),
        CHECK_ORGANIZATION("SELECT qbis_organization.org_id FROM qbis_organization WHERE qbis_organization.org_subdomain =?"),
        GET_ORGANIZATION_ID("SELECT qbis_organization.org_id FROM qbis_organization WHERE qbis_organization.org_subdomain=?"),
        ADD_ORGANIZATION("INSERT into qbis_organization(org_subdomain,org_Name) VALUES(?,?)"),
        GET_APPLICATION_FUNCTION_BASED_ON_ROLE("SELECT qbis_functions.pk, qbis_functions.menu_name, qbis_functions.menu_service, qbis_functions.menu_id, role_functions_mapping.function_id,menu_class FROM role_functions_mapping Inner Join qbis_functions ON role_functions_mapping.function_id = qbis_functions.pk "+
                                                " WHERE role_functions_mapping.roleId =? AND qbis_functions.is_deleted=0 GROUP BY role_functions_mapping.function_id"),
        SAVE_UPLOAD_CONTENT_BY_URL("INSERT INTO course_content_manager(content_name,content,uploaded_by,is_external_url,content_type_id,status) VALUES(?,?,?,?,?,?)"),
		CHECK_LOGIN_DETAILS("SELECT qbis_organization.org_id FROM qbis_organization Inner Join qbis_users ON qbis_organization.org_id = qbis_users.org_id WHERE qbis_organization.org_subdomain =? AND qbis_users.user_email =? AND qbis_users.user_pwd =PASSWORD(?)"),
        GET_COMPANY_LICENSE_DATA_BY_COMPANYID("SELECT license_details.license_id, license_details.license_name, license_details.validity_days, license_details.cost, license_details.created_on, license_details.created_by, license_company_details.buy_date, license_company_details.payment_status FROM license_company_details INNER JOIN license_details ON license_details.license_id = license_company_details.license_id WHERE license_company_details.company_id =?"),
        //GET_LICENSE_SUBDATA_BY_LICENSEID("SELECT license_sub_details.sub_feature_id, license_sub_feature.sub_feature_name, license_sub_details.count FROM license_sub_details INNER JOIN license_sub_feature ON license_sub_details.sub_feature_id = license_sub_feature.license_sub_feature_id WHERE license_sub_details.license_details_id=?"),
        FIND_COMPANY_BY_ID("SELECT qbis_organization.org_id, qbis_organization.org_Name, qbis_organization.org_desc, qbis_organization.org_status FROM qbis_organization WHERE  qbis_organization.org_id=?"),
        CHECK_VALIDITY_DETAILS("SELECT if(CURDATE()>(DATE_ADD(license_company_details.buy_date,INTERVAL license_details.validity_days DAY)),1,0) as 'test', license_company_details.buy_date, license_details.validity_days FROM license_company_details INNER JOIN license_details ON license_details.license_id = license_company_details.license_id WHERE license_company_details.company_id=?"),
        GET_TEST_COUNT_BY_ORGID("SELECT COUNT(qbis_test.test_id) FROM qbis_test WHERE qbis_test.org_id=?"),
        GET_COURSE_COUNT_BY_ORGID("SELECT COUNT(course_manager.course_id)  FROM course_manager INNER JOIN qbis_users ON course_manager.user_id = qbis_users.user_id WHERE qbis_users.org_id=?"),
        GET_LICENSE_FEATURE_BY_LICENSEID("SELECT DISTINCT license_sub_feature.license_feature_id, license_feature.feature_name FROM license_sub_details INNER JOIN license_sub_feature ON license_sub_details.sub_feature_id = license_sub_feature.license_sub_feature_id INNER JOIN license_feature ON license_sub_feature.license_feature_id = license_feature.license_feature_id WHERE license_sub_details.license_details_id = ?"),
        GET_LICENSE_SUBDATA_BY_LICENSEID_FEATUREID("SELECT license_sub_details.sub_feature_id, license_sub_feature.sub_feature_name, license_sub_details.count FROM license_sub_details INNER JOIN license_sub_feature ON license_sub_details.sub_feature_id = license_sub_feature.license_sub_feature_id WHERE license_sub_details.license_details_id=? AND license_sub_feature.license_feature_id=?"),
        GET_ALL_QUESTION_TYPES("SELECT question_type.pk,question_type.type_name FROM question_type"),
        GET_ALL_ACTIVE_UESTION_TYPES("SELECT question_type.pk,question_type.type_name FROM question_type WHERE is_deleted=0"),
        GET_CONTENT_USED_SPACE_BY_USERID("SELECT ifnull(SUM(course_content_manager.file_size),0) FROM course_content_manager INNER JOIN qbis_users ON qbis_users.user_id = course_content_manager.uploaded_by WHERE  qbis_users.user_id=?"),
        SAVE_ROLE_DETAILS("INSERT into roles(roleName,roleDesc,rolecreaterId) VALUES(?,?,?)"),
        MAP_ROLEID_AND_APPFUNCTION("INSERT INTO role_functions_mapping(roleId,function_id,sub_function_Id) values(?,?,?)"),
        GET_ROLE_DETAILS_BASED_ON_ADMIN_ID("SELECT roles.roleId,roles.roleName, roles.roleDesc FROM roles WHERE roles.rolecreaterId = ? OR roles.rolecreaterId=0"),
        GET_ROLE_LIST_BY_ORG_ID("SELECT roles.roleId,roles.roleName,roles.roleDesc,roles.rolecreaterId FROM roles WHERE roles.rolecreaterId=?"),
        GET_SUB_FUNCTION_BASED_ON_FUNCTION_ID("SELECT qbis_sub_function.sub_function_name, qbis_sub_function.sub_function_service, qbis_sub_function.sub_function_menu_id, qbis_sub_function.id,qbis_sub_function.sub_function_menu_class FROM role_functions_mapping Inner Join qbis_sub_function ON role_functions_mapping.sub_function_Id = qbis_sub_function.id WHERE role_functions_mapping.roleId =? AND role_functions_mapping.function_id =?"),
        GET_SUB_FUNCTIONS("SELECT qbis_sub_function.function_id, qbis_sub_function.sub_function_name, qbis_sub_function.sub_function_service, qbis_sub_function.sub_function_menu_id, qbis_sub_function.id FROM qbis_sub_function WHERE qbis_sub_function.function_id =?"),
        GET_ALL_APPLICATION_FUNCTIONS("SELECT qbis_functions.pk, qbis_functions.menu_name, qbis_functions.menu_service, qbis_functions.menu_id FROM qbis_functions  order by qbis_functions.pk"),
        GET_USER_COUNT_BY_ORGID("SELECT COUNT(qbis_users.user_id) FROM qbis_users WHERE qbis_users.org_id=?"),
        GET_ORGID_EXPIRE_IN_FEW_DAYS("SELECT license_company_details.company_id FROM license_company_details INNER JOIN license_details ON license_details.license_id=license_company_details.license_id WHERE DATE_ADD(CURRENT_DATE(),INTERVAL 3 DAY) = DATE(DATE_ADD(license_company_details.buy_date,INTERVAL license_details.validity_days DAY)) "),
        GET_USERS_DATA_BY_ORGID("SELECT qbis_users.user_id, qbis_users.user_email, qbis_users.first_name, qbis_users.last_name FROM qbis_users WHERE qbis_users.org_id=? AND qbis_users.status=1"),
        GET_LICENSE_LIST("SELECT license_details.license_id, license_details.license_name FROM license_details ORDER BY license_details.license_id"),
        INSERT_LICENSE_COMPANY_DATA("INSERT INTO license_company_details (license_id,company_id) VALUES(?,?)"),
		GET_GROUP_LIST_BY_CREATERID("SELECT qbis_group.pk,qbis_group.group_name, COUNT(qbis_user_group_mapping.qbis_user_id) as groupUserMapCount FROM qbis_group Inner Join qbis_user_group_mapping ON qbis_group.pk = qbis_user_group_mapping.qbis_group_pk WHERE qbis_group.created_by =? group BY qbis_group.pk DESC"),
		CHECK_GROUP_NAME("SELECT qbis_group.pk FROM qbis_group WHERE qbis_group.group_name=? AND qbis_group.created_by = ?"),
		CREATE_GROUP("INSERT INTO qbis_group(group_name,created_by) VALUES(?,?)"),
		GET_USERS_IN_GROUPS("SELECT qbis_users.user_email,qbis_users.user_id FROM qbis_group Inner Join qbis_user_group_mapping ON qbis_group.pk = qbis_user_group_mapping.qbis_group_pk Inner Join qbis_users ON qbis_user_group_mapping.qbis_user_id = qbis_users.user_id WHERE qbis_group.group_name =?"),
		MAP_USER_GROUP("INSERT INTO qbis_user_group_mapping(qbis_user_id,qbis_group_pk) VALUES (?,?)"),
		SAVE_VIDEO_QUESTION("INSERT INTO qbis_video_content_map(content_id,question_type,question,created_by,time_slot) VALUES(?,?,?,?,?)"),
		INSERT_VIDEO_CONTENT("INSERT INTO course_content_manager(content_name,content,content_type_id,uploaded_by,file_size,no_of_pages) VALUES(?,?,?,?,?,?)"),
		SAVE_VIDEO_QUESTION_OPTION("INSERT INTO qbis_video_content_map_details(qbis_video_content_map_id,answer,correct_answer) VALUES(?,?,?)"),
		GET_QUESTION_BY_CONTENT_ID("SELECT qbis_video_content_map.pk,qbis_video_content_map.question_type,qbis_video_content_map.question,qbis_video_content_map.time_slot,question_type.type_name,SEC_TO_TIME(qbis_video_content_map.time_slot) as sec FROM qbis_video_content_map Inner Join question_type ON qbis_video_content_map.question_type = question_type.pk WHERE content_id =? AND question_type.is_deleted = '0' ORDER BY time_slot ASC"),
		GET_OPTION_LIST_BY_QUSETION_ID("SELECT pk,answer,correct_answer,qbis_video_content_map_id FROM qbis_video_content_map_details WHERE qbis_video_content_map_details.qbis_video_content_map_id = ?"),
		UPDATE_LAST_LOGIN_TIME_BY_EMAIL("UPDATE qbis_users SET qbis_users.last_login=CURRENT_TIMESTAMP() WHERE qbis_users.user_email=?"),
		CHECK_LOGIN_LIFE_TIME("SELECT qbis_users.user_id FROM qbis_users  WHERE qbis_users.user_email=? AND CURRENT_TIMESTAMP()<DATE_ADD(qbis_users.last_login,INTERVAL ? HOUR)"),
		GET_TOTAL_GROUPS_BY_USERID("SELECT COUNT(qbis_group.pk) FROM qbis_group WHERE qbis_group.created_by=?"),
		GET_TOTAL_TRAINEES_BY_USERID("SELECT count(qbis_users.user_id) FROM qbis_users WHERE qbis_users.permissionId=? AND qbis_users.created_by=?"),
	    GET_USER_LIST_BY_BASED_ON_USER_ROLE_AND_STATUS("SELECT qbis_users.user_id,qbis_users.first_name,qbis_users.last_name,qbis_users.mobile,qbis_users.user_email,qbis_users.registration_id,qbis_users.status,roles.roleName FROM qbis_users INNER JOIN roles ON qbis_users.permissionId = roles.roleId WHERE qbis_users.status=? AND (qbis_users.created_by=? OR qbis_users.org_id = ? AND CASE WHEN ISNULL(?) THEN  qbis_users.user_id!= ? ELSE  qbis_users.permissionId = ? END)"),
	    GET_USER_LIST_BY_CREATERID_AND_SUBFUNCTION("SELECT qbis_users.user_id, qbis_users.first_name, qbis_users.last_name, qbis_users.mobile,qbis_users.user_email,qbis_users.registration_id,qbis_users.status, roles.roleName "+
                                       " FROM qbis_users Inner Join roles ON qbis_users.permissionId = roles.roleId Inner Join role_functions_mapping ON roles.roleId = role_functions_mapping.roleId WHERE qbis_users.created_by =? AND "+
                                       " role_functions_mapping.sub_function_Id =?"),
	    GET_GROUP_LIST_BY_CREATERID_AND_SUBFUNCTION("SELECT qbis_users.user_email,qbis_users.user_id FROM qbis_group Inner Join qbis_user_group_mapping ON qbis_group.pk = qbis_user_group_mapping.qbis_group_pk Inner Join qbis_users ON qbis_user_group_mapping.qbis_user_id = qbis_users.user_id "+
                                                   " Inner Join roles ON qbis_users.permissionId = roles.roleId Inner Join role_functions_mapping ON roles.roleId = role_functions_mapping.roleId WHERE qbis_group.group_name =? AND role_functions_mapping.sub_function_Id =?"),
	    GET_USER_LIST_BY_CREATERID_ROLEID_AND_SUBFUNCTION("SELECT qbis_users.user_email,qbis_users.user_id FROM qbis_group Inner Join qbis_user_group_mapping ON qbis_group.pk = qbis_user_group_mapping.qbis_group_pk Inner Join qbis_users ON qbis_user_group_mapping.qbis_user_id = qbis_users.user_id "+
                                                  " Inner Join roles ON qbis_users.permissionId = roles.roleId Inner Join role_functions_mapping ON roles.roleId = role_functions_mapping.roleId WHERE qbis_group.group_name =? AND role_functions_mapping.sub_function_Id =?"),

	    GET_LICENCE_DETAILS_BASED_ON_ORG("SELECT DATE_ADD(license_company_details.buy_date,INTERVAL ? DAY), license_company_details.payment_status, license_details.license_name, license_details.license_id,license_details.validity_days, license_details.validity_month, license_details.validity_years, license_details.cost "+
                                         " FROM license_details Inner Join license_company_details ON license_details.license_id = license_company_details.license_id WHERE license_company_details.company_id =?"),
	    GET_LICENCE_VALIDITY_DAYS("SELECT license_details.validity_days FROM license_details Inner Join license_company_details ON license_details.license_id = license_company_details.license_id WHERE license_company_details.company_id =?"),
	    GET_LICENSE_LIST_WITH_PRICE("SELECT license_details.license_id, license_details.license_name, license_details.validity_days,license_details.cost FROM license_details"),
	    UPDATE_LICENSEID_IN_ORG("UPDATE license_company_details set license_company_details.license_id=? ,license_company_details.buy_date=now(),license_company_details.payment_status=? where company_id=?"),
	    SAVE_TRANSECTION_DEATILS("insert into transection(transectionId,payementStatus,amount,licenseId,orgId) values(?,?,?,?,?)"),
		GET_ACTIVITY_LIST_OF_TRAINER("SELECT * FROM ( SELECT qbis_test.test_title as 'title', IFNULL(qbis_users.first_name,'Guest') as 'username', 'TEST_START' as 'activity', user_test_attempt.test_given_time as 'date' FROM user_test_attempt INNER JOIN qbis_users ON user_test_attempt.user_id = qbis_users.user_id INNER JOIN qbis_test ON qbis_test.test_id = user_test_attempt.test_id WHERE qbis_test.user_id=? AND user_test_attempt.ststus=0  UNION ALL SELECT course_manager.title as 'title', IFNULL(qbis_users.first_name,'Guest') as 'username', 'COURSE_ENROLL' as 'activity', course_assessment.enroll_date_time as 'date' FROM course_assessment INNER JOIN course_manager ON course_assessment.course_id = course_manager.course_id INNER JOIN qbis_users ON course_assessment.user_id = qbis_users.user_id  WHERE course_manager.user_id=?  UNION ALL SELECT qbis_test.test_title as 'title', IFNULL(qbis_users.first_name,'Guest') as 'username', 'TEST_DONE' as 'activity', user_test_attempt.test_given_time as 'date' FROM user_test_attempt INNER JOIN qbis_users ON user_test_attempt.user_id = qbis_users.user_id INNER JOIN qbis_test ON qbis_test.test_id = user_test_attempt.test_id WHERE qbis_test.user_id=? AND user_test_attempt.ststus=1) temp ORDER BY temp.date DESC  LIMIT 8"),
		GET_ATTEMPT_COUNT("SELECT MAX(qbis_attempt_video_question.attempted_number) FROM qbis_attempt_video_question INNER JOIN (SELECT qbis_video_content_map.pk FROM qbis_video_content_map WHERE qbis_video_content_map.content_id=(SELECT DISTINCT qbis_video_content_map.content_id FROM qbis_attempt_video_question Inner Join qbis_video_content_map ON qbis_attempt_video_question.qbis_video_content_map_pk = qbis_video_content_map.pk WHERE qbis_attempt_video_question.qbis_users_pk = ? AND qbis_attempt_video_question.course_section_manager_pk = ? AND qbis_attempt_video_question.qbis_video_content_map_pk = ?)) AS tab ON tab.pk =qbis_attempt_video_question.qbis_video_content_map_pk"),
		SAVE_VIDEO_CONTENT_ANSWER("INSERT INTO qbis_attempt_video_question(qbis_users_pk,course_section_manager_pk,qbis_video_content_map_pk,attempted_answer,attempted_number) VALUES(?,?,?,?,?)"),
        GET_QUESTION_FAVORIATEID("SELECT user_question_favorites.id FROM user_question_favorites WHERE  user_question_favorites.question_id=? AND user_question_favorites.user_id=? AND user_question_favorites.is_favorites=?"),
		GET_CONTENT_FAVORIATEID("SELECT user_content_favorites.id FROM user_content_favorites WHERE  user_content_favorites.content_id=? AND user_content_favorites.user_id=? AND user_content_favorites.is_favorites=?"),
		GET_CONTENTS_TOTAL_SIZE_BY_USERID("SELECT content_type.type_name, SUM(course_content_manager.file_size) FROM course_content_manager INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id WHERE course_content_manager.uploaded_by=? GROUP BY content_type.type_name"),
		GET_ACTIVE_USERS_LIST_BY_LASTLOGIN_DATE("SELECT qbis_users.user_id, qbis_users.first_name, qbis_users.last_name, qbis_users.mobile, qbis_users.user_email, roles.roleName, GROUP_CONCAT(DISTINCT qbis_group.group_name) as 'groupnames', DATE_FORMAT(qbis_users.last_login,'%d-%m-%Y %h:%m:%s') as 'last_login',roles.roleId FROM qbis_users INNER JOIN user_login_activity_details on qbis_users.user_id = user_login_activity_details.user_id LEFT JOIN roles ON qbis_users.permissionId = roles.roleId  LEFT JOIN qbis_user_group_mapping ON qbis_users.user_id = qbis_user_group_mapping.qbis_user_id LEFT JOIN qbis_group ON qbis_user_group_mapping.qbis_group_pk = qbis_group.pk"),
		GET_ACTIVE_USERS_LIST_BY_LASTLOGIN("SELECT qbis_users.user_id, qbis_users.first_name, qbis_users.last_name,	 qbis_users.user_email, user_login_activity_details.browser, user_login_activity_details.os, user_login_activity_details.ip_address,	DATE_FORMAT(MAX(user_login_activity_details.last_login_date),'%d-%m-%Y %H:%m:%s') AS 'last_login' FROM qbis_users INNER JOIN user_login_activity_details ON qbis_users.user_id = user_login_activity_details.user_id"),
		GET_ACTIVE_USERS_LIST_BY_LASTLOGIN_FOR_GROUP("SELECT  GROUP_CONCAT(DISTINCT qbis_users.user_id) FROM qbis_users INNER JOIN user_login_activity_details on qbis_users.user_id = user_login_activity_details.user_id LEFT JOIN roles ON qbis_users.permissionId = roles.roleId  LEFT JOIN qbis_user_group_mapping ON qbis_users.user_id = qbis_user_group_mapping.qbis_user_id LEFT JOIN qbis_group ON qbis_user_group_mapping.qbis_group_pk = qbis_group.pk "),
		GET_ACTIVE_GROUP_LIST_BY_USERIDS("SELECT qbis_group.pk, qbis_group.group_name, COUNT(qbis_user_group_mapping.qbis_user_id) as count_user, DATE_FORMAT(qbis_group.created_date,'%d-%m-%Y') as 'created_date', CONCAT(qbis_users.first_name,' ',qbis_users.last_name) as 'creatername' FROM qbis_group INNER JOIN qbis_user_group_mapping ON qbis_user_group_mapping.qbis_group_pk = qbis_group.pk INNER JOIN qbis_users ON qbis_group.created_by=qbis_users.user_id WHERE qbis_group.created_by=? AND  FIND_IN_SET(qbis_user_group_mapping.qbis_user_id, ?) GROUP BY  qbis_group.pk ORDER BY qbis_group.created_date desc"),
		GET_USERS_LIST_BY_CREATERID("SELECT qbis_users.user_id, qbis_users.first_name, qbis_users.last_name FROM qbis_users WHERE qbis_users.created_by=? AND qbis_users.status=1"),
		GET_USER_ATTEMPTED_TEST_DATA_BY_USERID("SELECT	user_test_attempt.test_id, qbis_test.test_title, COUNT(user_test_attempt.test_id) as 'numAttempt', MAX(user_test_attempt.test_given_time) AS 'last_attempted', user_test_attempt.obtain_marks,qbis_test.total_marks FROM user_test_attempt INNER JOIN qbis_users ON user_test_attempt.user_id = qbis_users.user_id INNER JOIN qbis_test ON user_test_attempt.test_id = qbis_test.test_id  AND user_test_attempt.ststus = 1 WHERE user_test_attempt.user_id = ?  GROUP BY qbis_test.test_id ORDER BY user_test_attempt.test_given_time DESC"),
		GET_CREATED_COURSE_DATA_BY_USERID("SELECT course_manager.course_id, course_manager.title, course_manager.published, course_manager.is_scheduled, GROUP_CONCAT(qbis_users.user_email) as 'assniee', DATE_FORMAT(course_manager.created_date,'%d-%m-%Y %h:%m:%s') FROM course_manager LEFT JOIN user_course_mapping ON user_course_mapping.course_id=course_manager.course_id LEFT JOIN qbis_users ON qbis_users.user_id = user_course_mapping.user_id WHERE course_manager.user_id=? GROUP BY course_manager.course_id ORDER BY course_manager.created_date desc"),
		GET_CREATED_TEST_DATA_BY_USERID("SELECT qbis_test.test_id, qbis_test.test_title, qbis_test.published,qbis_test.is_schedule, GROUP_CONCAT(qbis_users.user_email) as 'assniee', DATE_FORMAT(qbis_test.created_date,'%d-%m-%Y %h:%m:%s') FROM qbis_test LEFT JOIN user_test_mapping ON user_test_mapping.test_id=qbis_test.test_id LEFT JOIN qbis_users ON qbis_users.user_id = user_test_mapping.user_id WHERE qbis_test.user_id=? GROUP BY qbis_test.test_id ORDER BY  qbis_test.created_date desc"),
		GET_CONTENT_LIBRARY_DATA_BY_USERID("SELECT COUNT(course_content_manager.content_id) as 'count', SUM(course_content_manager.file_size) as 'size' FROM course_content_manager WHERE course_content_manager.uploaded_by=?"),
		GET_CREATED_QUESTION_COUNT_BY_USERID("SELECT COUNT(qbis_quest.question_id) as 'count' FROM qbis_quest WHERE qbis_quest.user_id=?"),
		SAVE_IP_AND_BROWSER_DETAILS("INSERT INTO user_login_activity_details(user_id,last_login_date,ip_address,os,browser) VALUES(?,CURRENT_TIMESTAMP(),?,?,?)"),
		SAVE_CONTENT_AUDIO("INSERT INTO qbis_content_audio(content_id,created_by,audio_folder_name,page_hold_time,page_number) VALUES(?,?,?,?,?)"),
		GET_AUDIO_BY_CONTENT_ID("SELECT * FROM qbis_content_audio WHERE content_id=?"),
		GET_LICENSE_SUB_FEATURES_DETAILS("SELECT license_sub_details.`count`, license_sub_feature.license_sub_feature_id,license_details.cost,license_details.yearly_cost,license_sub_feature.sub_feature_name FROM license_sub_details Inner Join license_sub_feature ON license_sub_details.sub_feature_id = license_sub_feature.license_sub_feature_id Inner Join license_feature ON license_sub_feature.license_feature_id = license_feature.license_feature_id Inner Join license_details ON license_sub_details.license_details_id = license_details.license_id WHERE license_sub_details.license_details_id =? ORDER BY license_sub_feature.license_sub_feature_id"),
		GET_ENROLLED_COURSE_DETAILS_USERID("SELECT count(course_assessment.course_assessment_id) as 'count', course_manager.title, MAX(course_assessment.enroll_date_time) as 'enrolldate' FROM course_assessment INNER JOIN course_manager ON course_assessment.course_id=course_manager.course_id WHERE course_assessment.user_id=?"),
		GET_AUDIT_PROFILE_USER("SELECT qbis_users.user_id, qbis_users.first_name, qbis_users.last_name, qbis_users.user_email, roles.roleName, DATE_FORMAT(qbis_users.modifyed_date,'%d-%m-%Y %H:%m:%s') as modifyed_date, qbis_users.modifyed_by, user.first_name, user.last_name, DATE_FORMAT(qbis_users.role_modifyed_date,'%d-%m-%Y %H:%m:%s') as role_modifyed_date,  qbis_users.role_modifyed_by, admin.first_name, admin.last_name FROM qbis_users INNER JOIN roles ON qbis_users.permissionId = roles.roleId LEFT JOIN qbis_users as user ON user.user_id = qbis_users.modifyed_by LEFT JOIN qbis_users as admin ON admin.user_id = qbis_users.role_modifyed_by"),
		GET_TRAINERS_LIST("SELECT  qbis_users.user_id, qbis_users.first_name, qbis_users.last_name FROM qbis_users WHERE qbis_users.permissionId=2"),
		GET_COURSE_ENROLLMENT_DATA_BY_FILTERS("SELECT course_assessment.course_id, course_manager.title, DATE_FORMAT(course_assessment.enroll_date_time,'%d-%m-%Y %H:%m:%s') as start_date, qbis_users.first_name, qbis_users.last_name, count(course_assessment.course_id) as 'totalEnrolled' FROM course_assessment INNER JOIN course_manager ON course_assessment.course_id = course_manager.course_id INNER JOIN qbis_users ON qbis_users.user_id = course_manager.user_id "),
		GET_ENROLL_COURSE_PARTICIPANT_DATA("SELECT course_assessment.course_id, course_manager.title, qbis_users.first_name, qbis_users.last_name, course_assessment.isEnroll, qbis_organization.org_Name, course_manager.user_id FROM course_assessment INNER JOIN course_manager ON course_assessment.course_id = course_manager.course_id INNER JOIN qbis_users ON qbis_users.user_id = course_assessment.user_id INNER JOIN qbis_organization ON qbis_organization.org_id = qbis_users.org_id WHERE  FIND_IN_SET(course_assessment.course_id, ?) GROUP BY  course_assessment.course_id ORDER BY qbis_users.first_name,course_manager.title"),
		SAVE_ACTIVITY_CONTENT_VIEW_BY_STUDENT("INSERT INTO activity_user_course_content_view(user_id,content_id,section_id,course_id,end_datetime,course_activity_id) VALUES(?,?,?,?,NOW(),?)"),
		SAVE_ACTIVITY_CONTENT_VIEW_BY_STUDENT1("INSERT INTO activity_user_course_content(user_id,content_id,section_id,course_id,view_datetime,end_datetime,session_id,attempt_id,is_completed,spent_time,is_mobile) VALUES(?,?,?,?,?,NOW(),?,?,?,?,?)"),
		GET_STATUS_COMPLETE("SELECT is_completed from activity_user_course_content where user_id=? AND section_id=? AND course_id=? AND session_id=?"),
		UPDATE_VIDEO_STATUS("update activity_user_course_content set is_resume=?,resume_time=?  where user_id=? AND section_id=? AND course_id=?  AND session_id=?"),
		GET_CONTENT_VIEWED_ACTIVITY_BY_USERID("SELECT activity_user_course_content_view.content_id, course_content_manager.content_name, course_manager.title as 'coursename' FROM activity_user_course_content_view INNER JOIN course_content_manager ON activity_user_course_content_view.content_id=course_content_manager.content_id INNER JOIN course_manager ON activity_user_course_content_view.course_id=course_manager.course_id WHERE activity_user_course_content_view.user_id=? ORDER BY activity_user_course_content_view.view_datetime desc "),
		SAVE_ACTIVITY_COURSE_VIEW_BY_TRAINEE("INSERT INTO activity_user_course_view(course_id, user_id, end_datetime) VALUES(?,?,NOW())"),
		EDIT_ACTIVITY_COURSE_VIEW_BY_TRAINEE("UPDATE activity_user_course_view set activity_user_course_view.end_datetime=CURRENT_TIMESTAMP() where activity_user_course_view.id=?"),
		GET_VIEWED_COURSE_BY_USER("SELECT course_manager.title, qbis_users.first_name,qbis_users.last_name, DATE_FORMAT(course_manager.created_date,'%d-%m-%Y %H:%m:%s'), TIMEDIFF(activity_user_course_view.end_datetime,activity_user_course_view.start_datetime) as 'timeSpent' FROM activity_user_course_view INNER JOIN course_manager ON activity_user_course_view.course_id = course_manager.course_id INNER JOIN qbis_users ON activity_user_course_view.user_id = qbis_users.user_id "),
		GET_TOTAL_ACTIVE_USERS_BY_MONTH("SELECT  COUNT(DISTINCT qbis_users.user_id) FROM qbis_users INNER JOIN user_login_activity_details ON qbis_users.user_id = user_login_activity_details.user_id WHERE qbis_users.created_by =? AND user_login_activity_details.last_login_date BETWEEN ? AND ?"),
		GET_VIDEO_STATUS("SELECT is_completed from activity_user_course_content where course_id=? AND section_id=? AND session_id=? AND user_id=?"),
		GET_VIDEO_STATUS1("SELECT is_completed from activity_user_course_content where course_id=? AND section_id=? AND user_id=?"),
		GET_VIDEO_STATUS2("SELECT is_completed,is_resume,resume_time from activity_user_course_content where course_id=? AND section_id=? AND session_id=? AND user_id=?"),
		
		GET_TEST_ACTIVE_USERS_BY_MONTH("SELECT COUNT(DISTINCT user_test_attempt.test_id) FROM user_test_attempt INNER JOIN qbis_test ON user_test_attempt.test_id = qbis_test.test_id WHERE qbis_test.user_id=? AND DATE(user_test_attempt.test_given_time) BETWEEN ? AND ?"),
		GET_COURSE_ACTIVE_USERS_BY_MONTH("SELECT COUNT(DISTINCT activity_user_course_view.user_id) FROM activity_user_course_view INNER JOIN course_manager ON course_manager.course_id = activity_user_course_view.course_id WHERE course_manager.user_id = ? AND activity_user_course_view.start_datetime BETWEEN ? AND ?"),
		RENAME_CONTENT_BY_ID("UPDATE course_content_manager SET  content=? WHERE content_id=?"),
		GET_TOTAL_VIDEO_SESSION("select count(*),spent_time from activity_user_course_content where course_id=? AND user_id=? AND  is_completed=1"),
		GET_COURSE_SECTION_SETTING_INFO("SELECT course_section_manager.section_id, course_section_manager.quiz_mandatory, course_section_manager.passing_criteria, course_section_manager.min_time_spent FROM course_section_manager INNER JOIN course_manager ON course_section_manager.course_id = course_manager.course_id  WHERE course_manager.user_id = ? AND course_manager.course_id = ? AND course_section_manager.section_id = ?"),
		UPDATE_COURSE_SECTION_SETTING_INFO("UPDATE course_section_manager SET  course_section_manager.quiz_mandatory = ? , course_section_manager.passing_criteria = ?, course_section_manager.min_time_spent = ? WHERE course_section_manager.course_id = ? AND course_section_manager.section_id = ?"),
		UPDATE_COURSE_CONTENT_END_DATETIME("UPDATE activity_user_course_content_view SET activity_user_course_content_view.end_datetime = NOW(),spent_time=TIMESTAMPDIFF(SECOND,view_datetime, end_datetime) WHERE activity_user_course_content_view.id = ?"),
		UPDATE_TEST_ATTEMPTED_ID_IN_CONTENT_ACTIVITY("UPDATE activity_user_course_content_view SET activity_user_course_content_view.test_attempt_id = ? WHERE activity_user_course_content_view.id = ?"),
		UPDATE_COURSE_END_DATETIME("UPDATE activity_user_course_view SET activity_user_course_view.end_datetime = NOW(), spent_time=TIMESTAMPDIFF(SECOND,start_datetime, end_datetime) WHERE activity_user_course_view.id = ?"),
		GET_COURSE_ACTIVITY_LIST_BASED_ON_USERID_COURSEID("SELECT id, course_id, start_datetime, end_datetime, spent_time FROM  activity_user_course_view WHERE course_id = ? AND user_id = ?"),
		GET_LATEST_ATTEMPTED_CONTENT_DETAILS_IN_COURSE("SELECT activity_user_course_content_view.course_id, activity_user_course_content_view.course_activity_id, activity_user_course_content_view.section_id, activity_user_course_content_view.content_id, activity_user_course_content_view.view_datetime FROM activity_user_course_content_view  WHERE activity_user_course_content_view.course_activity_id = (SELECT MAX(activity_user_course_content_view.course_activity_id) FROM activity_user_course_content_view WHERE activity_user_course_content_view.course_id = ? AND activity_user_course_content_view.user_id = ?) AND activity_user_course_content_view.view_datetime =  (SELECT MAX(activity_user_course_content_view.view_datetime) FROM activity_user_course_content_view WHERE activity_user_course_content_view.course_id = ? AND activity_user_course_content_view.user_id = ?)"),
		CHECK_NO_OF_QUIZ_IN_SECTION("SELECT COUNT(course_content_manager.content_id) as total_quiz FROM course_content_manager INNER JOIN content_type ON course_content_manager.content_type_id = content_type.content_type_id INNER JOIN content_section_mapping ON course_content_manager.content_id = content_section_mapping.content_id WHERE content_section_mapping.section_id = ? AND course_content_manager.content_type_id = ?"),
		GET_SECTIONLIST_WITH_SETTING_BASED_ON_COURSE_ID("SELECT course_section_manager.section_id, course_section_manager.section_name, course_section_manager.quiz_mandatory, course_section_manager.passing_criteria, course_section_manager.min_time_spent FROM course_section_manager INNER JOIN course_manager ON course_manager.course_id = course_section_manager.course_id WHERE course_manager.course_id = ? AND course_manager.user_id = ?"),
		GET_ATTEMPTED_TEST_DETAILS_BASED_ON_PASSING_CRITERIA_FOR_SECTION("SELECT activity_user_course_content_view.id,activity_user_course_content_view.test_attempt_id ,user_test_attempt.obtain_marks,qbis_test.total_marks FROM activity_user_course_content_view INNER JOIN user_test_attempt ON  user_test_attempt.pk = activity_user_course_content_view.test_attempt_id INNER JOIN  qbis_test ON qbis_test.test_id = user_test_attempt.test_id WHERE activity_user_course_content_view.content_id = ? AND activity_user_course_content_view.section_id = ? AND activity_user_course_content_view.course_id = ?  AND user_test_attempt.obtain_marks >= ( ? * qbis_test.total_marks/100)"),
		GET_QUIZ_TYPE_CONTENT_LIST_IN_QUIZ_MANDATORY_SECTION("SELECT course_content_manager.content_id,course_section_manager.passing_criteria FROM course_content_manager INNER JOIN content_section_mapping ON content_section_mapping.content_id = course_content_manager.content_id INNER JOIN course_section_manager ON course_section_manager.section_id = content_section_mapping.section_id WHERE course_section_manager.section_id = ? AND course_section_manager.course_id = ? AND course_content_manager.content_type_id = ? AND course_section_manager.quiz_mandatory = ?"),
		GET_SCORM_COURSE_ROOT_INFO("SELECT course_manager.scorm_root_path FROM course_manager WHERE course_manager.course_id = ?"),
		GET_CONFIG_LIST_BASED_ON_KEYS("SELECT system_config.id, system_config.key, system_config.name, system_config.type FROM system_config WHERE system_config.key IN (?,?,?,?,?,?)"),
		GET_CONFIG_MAPPING_LIST_BASED_ON_CONFIG_ID("SELECT system_config_mapping.id, system_config_mapping.config_id, system_config_mapping.value, system_config_mapping.order FROM system_config_mapping WHERE system_config_mapping.config_id = ? ORDER BY system_config_mapping.order ASC"),
		SAVE_TAGS_MAPPING("INSERT INTO tag_mapping (tag_mapping.config_id, tag_mapping.config_value, tag_mapping.mapped_id, tag_mapping.mapped_type) VALUES(?, ?, ?, ?)"),
		GET_TAGS_MAPPING("SELECT tag_mapping.config_id, tag_mapping.config_value FROM tag_mapping WHERE tag_mapping.mapped_id = ? AND tag_mapping.mapped_type = ?"),
        REMOVE_TAGS_MAPPING("DELETE tag_mapping.* FROM tag_mapping WHERE tag_mapping.mapped_id = ? AND tag_mapping.mapped_type = ?"),
		GET_PRODUCT_LIST("SELECT product.id, product.product_name, product.product_desc, product.price,product.icon,product_subscriber_mapping.user_id FROM product LEFT JOIN product_subscriber_mapping ON product_subscriber_mapping.product_id = product.id AND product_subscriber_mapping.user_id = ? WHERE product.is_deleted = 0 ORDER BY product.id LIMIT ?,?"),
		GET_COUSE_LIST_INSIDE_PRODUCT("SELECT course.course_id, course.title, course.description, course.promo_video, course.featured_image, course.tags FROM course_manager AS course INNER JOIN product_course_mapping ON course.course_id = product_course_mapping.course_id WHERE product_course_mapping.product_id=? AND course.published=1"),
		UPDATE_CONTENT_STREAMING_DATA("UPDATE course_content_manager SET course_content_manager.status = ?, course_content_manager.streaming_url = ? WHERE course_content_manager.content = ? AND course_content_manager.status != ?"),
		GET_CONTENT_SECTION_LIST("select csm.section_name,cssm.content_id,course_content_manager.content_name,content_type.type_name,cssm.attempt_id from course_section_manager as csm inner join content_section_mapping as cssm on csm.section_id=cssm.section_id inner join course_content_manager on cssm.content_id=course_content_manager.content_id inner join content_type on course_content_manager.content_type_id = content_type.content_type_id where csm.course_id=? AND csm.is_practice=0"),
		SAVE_USERS_IN_USER("INSERT into qbis_users(first_name,last_name,user_email,permissionId,status,user_pwd,org_id,registration_type) values(?,?,?,?,?,?,?,?)"),
		CHECK_EMAIL_IN_USER("SELECT user_id,first_name from qbis_users where user_email=?"),
		CHECK_USERID_IN_USER("SELECT qbis_users. user_email from qbis_users where user_id=?"),
		CHECK_COURSE_ID_IN_USER("SELECT course_manager.Title from course_manager where course_id=?"),
		GET_PRODUCT_BY_ID("SELECT product.id, product.product_name, product.product_desc, product.price, product_subscriber_mapping.user_id FROM product LEFT JOIN product_subscriber_mapping ON product_subscriber_mapping.product_id = product.id AND product_subscriber_mapping.user_id = ? WHERE product.is_deleted = 0  AND product.id=?"),
		GET_SECTIONS_WITHIN_SAME_COURSE("select count(*) from course_section_manager where course_id=? AND is_practice=0;"),
		SAVE_PRODUCT_SUBSCRIBER("INSERT into product_subscriber_mapping(product_id,user_id,subscribed_data,tx_id) values(?,?, NOW(), ?)"),
		FIND_CONFIG_BASED_VALUE("SELECT id, config_id from system_config_mapping WHERE LOWER(system_config_mapping.value)=LOWER(?)"),
		GET_CONFIG_ID_BASED_KEY("SELECT id FROM system_config WHERE system_config.key = ?"),
		GET_COURSE_CHAPTER_COUNT("SELECT COUNT(*) FROM course_section_manager where course_id=? AND is_practice=0 group by course_id"),
		GET_COURSE_VIDEO_COUNT("SELECT count(*) from course_section_manager csm INNER JOIN content_section_mapping cosm ON csm.section_id=cosm.section_id INNER JOIN course_content_manager ccm ON cosm.content_id=ccm.content_id where csm.course_id=? AND csm.is_practice=0 AND ccm.content_type_id=10"),
		GET_PUBLISHED_COURSE_LIST_FOR_ELUMINATE("SELECT course_manager.course_id, course_manager.title, course_manager.description, course_manager.highlights, course_manager.promo_video, course_manager.featured_image, course_manager.tags,course_manager.published,difficulty_level.level_name, language_content.language_name, COUNT(course_section_manager.section_id) as countSec, qbis_users.user_email, course_manager.course_icon,course_manager.course_image FROM course_manager INNER JOIN qbis_users ON course_manager.user_id=qbis_users.user_id INNER JOIN difficulty_level ON course_manager.level_id = difficulty_level.level_id INNER JOIN language_content ON course_manager.language_id = language_content.language_id LEFT JOIN course_section_manager ON course_section_manager.course_id = course_manager.course_id AND course_section_manager.published=1 LEFT JOIN course_assessment ON course_assessment.course_id=course_manager.course_id LEFT JOIN user_course_mapping ON user_course_mapping.course_id = course_manager.course_id WHERE course_manager.published = ? AND qbis_users.org_id= ? AND course_manager.shared = CASE WHEN (user_course_mapping.user_id = ?)  THEN 1 ELSE 0 END GROUP BY course_manager.course_id  ORDER BY course_manager.published_on"),
		UPDATE_STUDENT_PROFILE("UPDATE qbis_users set qbis_users.first_name=? ,qbis_users.last_name=?,qbis_users.mobile=?,qbis_users.address=? where qbis_users.user_email=?"),
		GETCONTENTDATA("SELECT course_content_manager.content_name FROM course_content_manager where course_content_manager.content_name = ?"),
		//UPDATEFINALCONTENTDATA("UPDATE course_content_manager set streaming_url=?,status=? where content=? "),
		UPDATE_STREAMING_URL("UPDATE course_content_manager set streaming_url=?,status=? WHERE content_name=?"),
		GET_SINGLE_VIDEO_STATUS("SELECT is_completed from activity_user_course_content where user_id=? AND course_id=? AND section_id=? AND session_id=?"),
		GET_USER_SUBSCRIPTION_STATUS("SELECT product_course_mapping.course_id,product_course_mapping.product_id,product_subscriber_mapping.user_id from product_subscriber_mapping inner join product_course_mapping on product_course_mapping.product_id = product_subscriber_mapping.product_id where product_course_mapping.course_id =? AND product_subscriber_mapping.user_id=?"),
		GET_OVERALL_PERFORMANCE("select correct_que_score,wrong_que_score, obtain_marks from user_section_attempt where user_id=? and section_id=?"),
		GET_SESSIONID("SELECT course_session_manager.id from course_session_manager inner join course_section_manager on course_section_manager.section_id=course_session_manager.section_id where course_section_manager.course_id=? limit 1"),
		GET_OVERALL_SESSIONS_IN_COURSE("select count(*),course_session_manager.id from course_session_manager inner join course_section_manager on course_section_manager.section_id=course_session_manager.section_id where course_section_manager.course_id=? AND course_section_manager.is_chapter_test=0"),
		GET_PERFORMANCE_TILL_DATE("select user_test_attempt.correct_que_attempt,user_test_attempt.wrong_que_attempt,user_test_attempt.unattampt_que from user_test_attempt where user_id=?"),
		GET_TOTAL_VIDEO_SESSION1("select count(*) from activity_user_course_content where course_id=?  AND is_completed=1 and user_id=?"),
		GET_COURSE_SESSION_NAME("select session_name from course_session_manager where id=?"),
		GET_UNIQUE_CREDENTIAL("select product_id from product_subscriber_mapping where unique_credential=?"),
		SESSION_RELATION("SELECT csm.id,csm.session_name,csm.section_id,csm.is_live,csm.is_chapter_test from course_session_manager csm inner join course_section_manager csem on csm.section_id=csem.section_id where csem.course_id=?"),
		SESSION_RELATIONFORCHAPTERTEST("SELECT csm.id,csm.session_name,csm.section_id,csm.is_live,csm.is_chapter_test from course_session_manager csm inner join course_section_manager csem on csm.section_id=csem.section_id where csem.course_id=? AND csm.is_chapter_test=1"),
		//	INSERT_SESSION_DETAILS("insert into course_session_manager (session_name,section_id,is_live,created_date) values(?,?,?,now())");
		GET_CHAPTER_TEST("SELECT section_id,section_name,course_id,is_chapter_test from  course_section_manager where course_id=?"),
		SAVE_COURSE_SESSION_DETAILS("INSERT INTO course_session_manager(session_name,section_id,created_date,is_live,is_chapter_test,is_enable,is_free) VALUES(?,?,NOW(),?,?,?,?)"),
		DELETE_SESSIONS("DELETE FROM course_session_manager where id=?"),
		UPDATE_SESSIONS("UPDATE course_session_manager set session_name=? where id=?"),
		INSERT_SESSION_CHECKBOX("update course_session_manager set is_live=?,is_enable=?,is_free=? where id=?"),
		GET_COURSE_SESSION_DATA("select course_section_manager.section_id, course_section_manager.section_name,course_session_manager.id,course_session_manager.session_name,course_session_manager.is_live,is_enable,is_free,course_session_manager.is_chapter_test, course_manager.course_id,course_manager.title,course_manager.description from course_section_manager inner join course_manager on course_manager.course_id=course_section_manager.course_id  inner join course_session_manager on course_session_manager.section_id=course_section_manager.section_id where course_section_manager.course_id=?"),
		GET_ATTEMPT_CONTENT_SESSION_DETAILS("select course_section_manager.section_name,content_section_mapping.content_id,course_session_manager.session_name,course_content_manager.content_name,content_type.type_name,content_section_mapping.attempt_id from course_section_manager inner join course_session_manager on course_section_manager.section_id=course_session_manager.section_id   inner join content_section_mapping  on course_session_manager.id=content_section_mapping.session_id inner join course_content_manager on content_section_mapping.content_id=course_content_manager.content_id inner join content_type on course_content_manager.content_type_id = content_type.content_type_id where course_session_manager.id=? AND course_section_manager.is_practice=0 and content_type.content_type_id!=10"),
		GET_RANDOM_QUESTION_ID("SELECT distinct(qbis_quest.question_id) from qbis_quest inner join tag_mapping on qbis_quest.question_id =tag_mapping.mapped_id inner join system_config_mapping on system_config_mapping.id = tag_mapping.config_value where tag_mapping.mapped_type='question'"),
		GET_RANDOM_QUESTION_ID1("select count(*),group_concat(config_value),CASE when config_value=? then mapped_id when config_value=? then mapped_id when config_value=? then mapped_id when config_value=? then mapped_id when config_value=? then mapped_id when config_value=? then mapped_id end question_id from tag_mapping where mapped_type='question' group by question_id"),
		GET_QUESTION("SELECT qbis_quest.question_id,CONVERT(qbis_quest.question_txt USING utf8) AS question_txt,qbis_quest.answer_explanation,qbis_quest.question_type,qbis_quest.is_formula,CONVERT(qbis_quest.math_formula USING utf8) AS math_formula, qbis_quest.answer_value,qbis_quest.question_setting,qbis_quest.answer_value FROM qbis_quest where question_id=?"),
		GET_TAG_LIST_BY_TESTID("SELECT mapped_id,config_value,mapped_type FROM tag_mapping where mapped_id=?"),
		GET_TAG_ALL_TAG("SELECT mapped_id,config_value,mapped_type from tag_mapping where tag_mapping.config_value in(?,?,?,?,?,?) AND mapped_type='question'"),
		GET_COURSE_SUBSCRIBE("SELECT product_course_mapping.course_id from product_course_mapping inner join product_subscriber_mapping on product_subscriber_mapping.product_id=product_course_mapping.product_id where product_subscriber_mapping.user_id=? and product_course_mapping.course_id in(?,?)"),
		GET_VIDEO_LIST_FROM_SESSION("select course_content_manager.content_name,content_section_mapping.content_id,course_content_manager.video_duration from content_section_mapping inner join course_content_manager on course_content_manager.content_id=content_section_mapping.content_id where content_section_mapping.session_id =? AND course_content_manager.content_type_id=10"),
		GET_COURSE_DETAILS("SELECT course_manager.course_id,course_manager.title,course_manager.description,course_manager.promo_video from course_manager where course_id=?"),
		GET_SECTION_DETAILS("select course_section_manager.section_id,course_section_manager.section_name,course_section_manager.is_practice,parent_id,is_chapter_test from course_section_manager where course_id=?"),
		GET_PRACTICE_SECTION_DETAILS("select course_section_manager.section_id,course_section_manager.section_name,course_section_manager.is_practice,parent_id,is_chapter_test from course_section_manager where course_id=? and is_practice=1"),
		GET_OVERALL_MARKS_OF_COURSE("select user_test_attempt.obtain_marks,user_test_attempt.test_id,qbis_test.total_marks,qbis_test.is_random from activity_user_course_content_view inner join user_test_attempt on user_test_attempt.pk=activity_user_course_content_view.test_attempt_id inner join qbis_test on qbis_test.test_id=user_test_attempt.test_id where activity_user_course_content_view.user_id=? and activity_user_course_content_view.course_id=? AND user_test_attempt.ststus=1"),
		GET_QUESTION_MARKS_FOR_STATIC_TEST("select user_test_attempt.obtain_marks,user_test_attempt.test_id,qbis_test.every_ques_mark*qbis_test.max_question  as total_marks from activity_user_course_content_view inner join user_test_attempt on user_test_attempt.pk=activity_user_course_content_view.test_attempt_id inner join qbis_test on qbis_test.test_id=user_test_attempt.test_id where activity_user_course_content_view.user_id=? and activity_user_course_content_view.course_id=? AND user_test_attempt.ststus=1"),
		IS_RANDOM("SELECT is_random from qbis_test where test_id=?"),
        GET_SESSION_DETAILS("select course_session_manager.id,course_session_manager.session_name,course_session_manager.created_date,course_session_manager.is_live,course_session_manager.is_chapter_test,course_session_manager.is_enable,course_session_manager.is_free,course_session_manager.video_url from course_session_manager where section_id=?"),
		GET_TEST_DETAIL(" select user_test_attempt.test_id,user_test_attempt.time_taken,user_test_attempt.obtain_marks,user_test_attempt.correct_que_attempt,user_test_attempt.wrong_que_attempt,user_test_attempt.unattampt_que,user_test_attempt.correct_que_score,user_test_attempt.wrong_que_score,qbis_test.every_ques_mark from user_test_attempt inner join qbis_test on qbis_test.test_id=user_test_attempt.test_id where pk=? and ststus=1"),
		INSERT_SESSION_CHECKBOX_ISLIVE("update course_session_manager set is_live=? where id=?"),
		INSERT_SESSION_CHECKBOX_ISENABLE("update course_session_manager set is_enable=? where id=?"),
		INSERT_SESSION_CHECKBOX_ISFREE("update course_session_manager set is_free=? where id=?"),
		FIND_SESSION_CHECKBOX("SELECT id,is_live,is_enable,is_free from course_session_manager"),
		GET_TEST_ID("SELECT test_id FROM user_test_attempt where pk=? and user_id=?"),
		GET_TEST_ID_DETAIL("SELECT every_ques_mark,max_question,is_random,negative_mark,test_title from qbis_test where test_id=?  and status=1 and published=1"),
		GET_TEST_ID_DETAIL1("SELECT is_random from qbis_test where test_id=? and user_id=? and status=0 and published=0"),
		INSERT_QBIS_SECTION("INSERT into random_section(section_id,section_name,test_id,section_mark,sequence) values(?,?,?,?,?)"),
		INSERT_QBIS_SECTION1("INSERT into random_section(section_id,section_name,test_id,section_mark,sequence,user_id) values(?,?,?,?,?,?)"),
		
		UPDATE_QBIS_SECTION("update random_section set section_id=?,section_name=?,test_id=?,section_mark=?,sequence=? where id=?"),
		GET_QBIS_RANDOM_SECTION_ID("select section_id from random_section where section_id=?"),
		GET_RANDOM_SECTION_ID("select section_id from random_section where id=?"),
		GET_ISPUBLISHED("SELECT published from course_manager where course_id=?"),
        INSERT_QUESTION_SECTION("INSERT into Random_quiz_question_mapping(section_id,question_id,question_order,question_marks,negative_mark) values(?,?,?,?,?)"),
        INSERT_QUESTION_SECTION1("INSERT into Random_quiz_question_mapping(section_id,question_id,question_order,question_marks,negative_mark,user_id,test_id) values(?,?,?,?,?,?,?)"),
        
        UPDATE_QUESTION_SECTION("update Random_quiz_question_mapping set section_id=?,question_id=?,question_order=?,section_mark=?,sequence=? where id=?"),
        GET_QUESTION_DETAIL1("SELECT qbis_quest.question_id, Random_quiz_question_mapping.question_marks, Random_quiz_question_mapping.negative_mark,qbis_quest.question_type,qbis_quest.answer_value FROM qbis_quest INNER JOIN Random_quiz_question_mapping ON qbis_quest.question_id = Random_quiz_question_mapping.question_id WHERE Random_quiz_question_mapping.question_id=? AND Random_quiz_question_mapping.section_id=?"),
        GET_TOTAL_NO_QUESTION("select max_question from qbis_test where test_id=?"),
        GET_SECTIONS_BY_TEST_ATTEMPT_PK1("SELECT user_section_attempt.pk, user_section_attempt.section_id, random_section.section_name FROM user_section_attempt INNER JOIN random_section ON user_section_attempt.section_id = random_section.section_id  INNER JOIN user_test_attempt ON user_test_attempt.pk = user_section_attempt.user_test_attempt_pk WHERE user_test_attempt.pk = ? and random_section.user_id=? and random_section.test_id=?"),
        GET_QUESTIONS_BY_SECTION_ATTEMPT_PK1("SELECT distinct(qbis_quest.question_id), qbis_quest.question_txt, qbis_quest.question_type,uqa.is_correct, Random_quiz_question_mapping.question_order, uqa.pk, qbis_quest.answer_explanation, uqa.is_favorite, uqa.notes,qbis_quest.answer_value,uqa.answer_value,qbis_quest.question_setting FROM user_section_attempt usa LEFT JOIN random_section sec ON sec.section_id = usa.section_id LEFT JOIN Random_quiz_question_mapping  ON Random_quiz_question_mapping.section_id = sec.section_id  INNER JOIN qbis_quest ON qbis_quest.question_id = Random_quiz_question_mapping.question_id LEFT JOIN user_question_attempt uqa ON uqa.qbis_quest_question_id = qbis_quest.question_id AND uqa.user_section_attempt_pk = usa.pk WHERE  usa.pk = ? AND usa.user_id = ? AND Random_quiz_question_mapping.test_id=? AND Random_quiz_question_mapping.user_id=? order by Random_quiz_question_mapping.question_order asc"),
        GET_SECTION_DETAIL("select distinct(course_section_manager.section_id),course_section_manager.section_name from course_content_manager inner join content_section_mapping on course_content_manager.content_id=content_section_mapping.content_id inner join course_section_manager on course_section_manager.section_id= content_section_mapping.section_id where course_content_manager.content=?"),
		GET_ATTEMPT_DETAILS("select content_section_mapping.attempt_id,course_content_manager.content_name,content_section_mapping.content_id,content_section_mapping.session_id,course_content_manager.content from content_section_mapping inner join course_content_manager on content_section_mapping.content_id =course_content_manager.content_id where content_section_mapping.session_id=? and course_content_manager.content_type_id!=10"),	
		GET_SESSION_USER_LISENCE_DETAILS("select course_session_manager.id,course_session_manager.session_name,course_session_manager.section_id,course_section_manager.course_id,product_course_mapping.product_id,course_session_manager.is_free from course_session_manager inner join course_section_manager on course_session_manager.section_id = course_section_manager.section_id inner join product_course_mapping on product_course_mapping.course_id =course_section_manager.course_id inner join product_subscriber_mapping on product_subscriber_mapping.product_id =product_course_mapping.product_id where course_session_manager.id=? and product_subscriber_mapping.user_id =? and course_session_manager.is_live =1 and course_session_manager.is_enable=1"),
		GET_FREE_CONTENTS(" select course_session_manager.id,course_session_manager.session_name,course_session_manager.section_id,course_section_manager.course_id,course_session_manager.is_free from course_session_manager inner join course_section_manager on course_session_manager.section_id = course_section_manager.section_id   where course_session_manager.id=?  and course_session_manager.is_live =1 and course_session_manager.is_enable=1"),
		GET_SESSION_USER_LISENCE_DETAILS_FROM_ALL_SESSIONS("select course_session_manager.id,course_session_manager.session_name,course_session_manager.section_id,course_section_manager.course_id,product_course_mapping.product_id,course_session_manager.is_free from course_session_manager inner join course_section_manager on course_session_manager.section_id = course_section_manager.section_id inner join product_course_mapping on product_course_mapping.course_id =course_section_manager.course_id inner join product_subscriber_mapping on product_subscriber_mapping.product_id =product_course_mapping.product_id where product_subscriber_mapping.user_id =? and course_session_manager.is_live =1 and course_session_manager.is_enable=1"),
		GET_FREE_CONTENTS_FROM_ALL_SESSIONS("select course_session_manager.id,course_session_manager.session_name,course_session_manager.section_id,course_section_manager.course_id,course_session_manager.is_free from course_session_manager inner join course_section_manager on course_session_manager.section_id = course_section_manager.section_id   where  course_session_manager.is_live =1 and course_session_manager.is_enable=1"),
		GET_SESSION_DETAILS_NEW("select course_session_manager.id,course_session_manager.session_name,course_session_manager.created_date,course_session_manager.is_live,course_session_manager.is_chapter_test,course_session_manager.is_enable,course_session_manager.is_free from course_session_manager where section_id=?"),
		GET_SECTION_DETAILS_FOR_API("select course_section_manager.section_id,course_section_manager.section_name,course_section_manager.is_practice,course_section_manager.parent_id,course_section_manager.is_chapter_test,course_manager.title,course_manager.course_image from course_section_manager inner join course_manager on course_manager.course_id=course_section_manager.course_id where course_section_manager.course_id=? and is_practice =0 and course_section_manager.is_chapter_test=0"),
		GET_SECTION_DETAILSNEW("select course_section_manager.section_id,course_section_manager.section_name,course_section_manager.is_practice,course_section_manager.parent_id,course_section_manager.is_chapter_test,course_section_manager.course_id,course_section_manager.contains_chapter_test,course_manager.course_image from course_section_manager inner join course_manager on course_section_manager.course_id=course_manager.course_id where section_id=?"),
		GET_SECTION_DETAILS_FOR_CHAPTERTEST("select course_section_manager.section_id,course_section_manager.section_name,course_section_manager.is_practice,course_section_manager.parent_id,course_section_manager.is_chapter_test,course_section_manager.course_id,course_section_manager.contains_chapter_test,course_manager.course_image from course_section_manager inner join course_manager on course_section_manager.course_id=course_manager.course_id where parent_id=? and is_practice!=1"),
		GET_ATTEMPT_DETAILSNEW("select content_section_mapping.attempt_id,course_content_manager.content_name,content_section_mapping.content_id,content_section_mapping.session_id,course_content_manager.content from content_section_mapping inner join course_content_manager on content_section_mapping.content_id =course_content_manager.content_id where content_section_mapping.session_id=? and course_content_manager.content_type_id!=10"),
		GET_SESSION_DETAILSNEW("select course_session_manager.id,course_session_manager.session_name,course_session_manager.created_date,course_session_manager.is_live,course_session_manager.is_chapter_test,course_session_manager.is_enable,course_session_manager.is_free,course_content_manager.streaming_url from course_session_manager inner join content_section_mapping on content_section_mapping.session_id =course_session_manager.id inner join course_content_manager on course_content_manager.content_id =content_section_mapping.content_id where course_session_manager.section_id=? AND  course_content_manager.content_type_id=10 order by course_session_manager.id"),
		GET_PRACTICE_ATTEMPTS("select content_section_mapping.attempt_id,course_content_manager.content_id,course_content_manager.content_name,content_section_mapping.session_id,course_content_manager.content from course_section_manager inner join content_section_mapping on content_section_mapping.section_id=course_section_manager.section_id inner join course_content_manager on course_content_manager.content_id=content_section_mapping.content_id and course_section_manager.section_id=? and course_section_manager.is_practice=1"),
		GET_SUBSCRIPTIONSTATUS_BY_SESSION("select product_subscriber_mapping.user_id from product_subscriber_mapping inner join product_course_mapping on product_subscriber_mapping.product_id =product_course_mapping.product_id inner join course_section_manager on course_section_manager.course_id=product_course_mapping.course_id inner join course_session_manager on course_session_manager.section_id =course_section_manager.section_id where course_session_manager.id=? and product_subscriber_mapping.user_id =?"),
		GET_SECTION_NAME_FOR_TEST_TAGS("SELECT section_id,section_name from course_section_manager where course_id=? and is_practice=0 and is_chapter_test=0"),
		GET_SESSION_NAME_FOR_TEST_TAGS("SELECT id,session_name from course_session_manager where section_id=? and is_chapter_test=0"),
		GET_PUBLISHED_COURSE_ID("select course_id from course_manager where published=1"),
		GET_STUDENT_TEST_RESULT("select user_test_attempt.obtain_marks,user_test_attempt.test_id,qbis_test.total_marks,qbis_test.is_random from activity_user_course_content_view inner join user_test_attempt on user_test_attempt.pk=activity_user_course_content_view.test_attempt_id inner join qbis_test on qbis_test.test_id=user_test_attempt.test_id where activity_user_course_content_view.user_id=? and activity_user_course_content_view.course_id=? and activity_user_course_content_view.section_id=? and activity_user_course_content_view.session_id=? and activity_user_course_content_view.content_id=? and activity_user_course_content_view.attempt_id=? "),
		GET_STUDENT_TEST_RESULT1("select user_test_attempt.obtain_marks,user_test_attempt.test_id,every_ques_mark*max_question as total_mark from activity_user_course_content_view inner join user_test_attempt on user_test_attempt.pk=activity_user_course_content_view.test_attempt_id inner join qbis_test on qbis_test.test_id=user_test_attempt.test_id where activity_user_course_content_view.user_id=? and activity_user_course_content_view.course_id=? and activity_user_course_content_view.section_id=? and activity_user_course_content_view.session_id=? and activity_user_course_content_view.content_id=? and activity_user_course_content_view.attempt_id=? "),
		
		GET_SECTION_ID("select course_session_manager.id,course_session_manager.session_name,course_session_manager.section_id,content_section_mapping.attempt_id,course_section_manager.is_chapter_test,course_section_manager.parent_id,course_section_manager.contains_chapter_test from course_session_manager inner join course_section_manager on course_session_manager.section_id=course_section_manager.section_id inner join content_section_mapping on content_section_mapping.session_id=course_session_manager.id inner join course_content_manager on course_content_manager.content_id=content_section_mapping.content_id where  course_section_manager.section_id=? and course_content_manager.content_type_id!=10"),
		GET_SECTION_WISE_CHARTS("SELECT section_id,section_name,is_chapter_test from course_section_manager where course_id=? and is_practice!=1 "),
		GET_SESSION_CONTENT("select distinct(content_section_mapping.content_id) from content_section_mapping inner join course_content_manager on course_content_manager.content_id=content_section_mapping.content_id where content_section_mapping.session_id=? and course_content_manager.content_type_id!=10;"),
		UPDATE_PROFILE_PICTURE_URL("update qbis_users set profile_img = ? where user_id =? "),
		GET_LEARNING_STATUS("select is_completed from activity_user_course_content where user_id=? and course_id=?"),
		GET_SMILE_DATA("select is_good,is_bad,is_excellent,text_feedback from user_video_feedback where user_id=? and course_id=? and section_id=? and session_id=? and content_id=?"),
		INSERT_FEEDBACK_DATA("Insert into user_video_feedback (user_id,course_id,section_id,session_id,content_id,is_good,is_bad,is_excellent,text_feedback) values(?,?,?,?,?,?,?,?,?)"),
		UPDATE_SMILES("update user_video_feedback set is_good=?,is_bad=?,is_excellent=?,text_feedback=? where user_id=? and course_id=? and section_id=? and session_id=? and content_id=?"),
		UPDATE_SMILES_WITHOUT_FEEDBACK("update user_video_feedback set is_good=?,is_bad=?,is_excellent=? where user_id=? and course_id=? and section_id=? and session_id=? and content_id=?"),
        GET_BAD_COUNT("select count(*) from user_video_feedback where is_bad=1 and session_id=?"),
		GET_EXCELLENT_COUNT("select count(*) from user_video_feedback where is_excellent=1 and session_id=?"),
		GET_TOTAL_SESSIONS("SELECT count(*) from course_session_manager where section_id=?"),
		GET_GOOD_COUNT("select count(*) from user_video_feedback where is_good=1 and session_id=?"),
        GET_COURSE_ID("select course_id from course_manager where title like ?"),
        VALIDATE_USER_EMAIL("update qbis_users set secondryEmail=?,isValidated=? where user_id=?"),
        GET_EMAIL_VALIDATION_FLAG("SELECT isValidated from qbis_users where user_id=?"),
        GET_ONE_TEST_DETAIL1("SELECT   qbis_test.is_random,qbis_test.max_question*qbis_test.every_ques_mark as total_mark, qbis_test.total_marks,qbis_test.max_question,Floor(qbis_test.total_marks/every_ques_mark) as totalques FROM qbis_test INNER JOIN qbis_organization ON qbis_organization.org_id = qbis_test.org_id INNER JOIN qbis_users ON qbis_test.user_id = qbis_users.user_id  WHERE qbis_test.test_id=? AND qbis_test.published=1 GROUP BY qbis_test.test_id"),
        GET_ALL_SECTIONS("select section_id,section_name from course_section_manager where course_id=? and contains_chapter_test=1"),
        GET_SECTION("SELECT is_practice FROM course_section_manager where section_id=?"),
        GET_ISCHAPTER("SELECT is_chapter_test from course_section_manager where section_id=?"),
        IS_EMAIL_VALIDATED("select isValidated from qbis_users where user_id=?"),
        GET_ALL_FEEDBACKS("SELECT user_video_feedback.is_good,user_video_feedback.is_bad,user_video_feedback.is_excellent,user_video_feedback.text_feedback,user_video_feedback.session_id,user_video_feedback.user_id,qbis_users.secondryEmail from user_video_feedback inner join qbis_users on user_video_feedback.user_id=qbis_users.user_id where course_id=?");




		
		private String query;
		QueryStrings(String query){
			this.query=query;
		}
		public String getQuery(){
			return query;
		}
	}
	public static QueryData executeQuery(QueryStrings query)
	{
		return execuateQuery(query, null);
	}
	public static Integer execuateUpdate(QueryStrings query,Object[] params)
	{
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int id=0;
		
		try{
			con=DBUtil.getConnection();
			String queryStr=query.getQuery();
			pstmt=con.prepareStatement(queryStr,Statement.RETURN_GENERATED_KEYS);
			if(params!=null)
			pstmt=mapParams(pstmt,params);
			/*System.out.println("execuateUpdate :"+pstmt.toString());*/
			 id =  pstmt.executeUpdate();
	         rs = pstmt.getGeneratedKeys();
	            if (rs.next()){
	                id=rs.getInt(1);
	            }
			
			
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			DBUtil.closeResource(con, pstmt,rs);
			
		}
		
		return id;
	}
	public static QueryData execuateQuery(QueryStrings query,Object[] params)
	{
		
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		QueryData data=new QueryData();
		try{
			con=DBUtil.getConnection();
			String queryStr=query.getQuery();
			pstmt=con.prepareStatement(queryStr);
			if(params!=null)
			pstmt=mapParams(pstmt,params);
			System.out.println(pstmt.toString());			
			if(queryStr!=null && !queryStr.isEmpty())
			{
				String lowerCaseQuery=queryStr.trim().toLowerCase();
				if(lowerCaseQuery.startsWith("insert") ||lowerCaseQuery.startsWith("update") || lowerCaseQuery.startsWith("delete"))
				{
					pstmt.executeUpdate();
					return null;
				}
			}
			
			rs=pstmt.executeQuery();
			ResultSetMetaData rsmd = rs.getMetaData();
			int columnCount = rs.getMetaData().getColumnCount();
			for (int i=1; i<columnCount+1; i++) {
		       data.addColumn( rsmd.getColumnLabel(i));
		    }
			while(rs.next())
			{
				QueryData.Row row = data.new Row();
				for (int i=1; i<columnCount+1; i++) {
					row.add(rs.getString(i));
				}
				data.addRow(row);
				
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			DBUtil.closeResource(con, pstmt,rs);
			
		}
		return data;
	}
	
	private static PreparedStatement mapParams(PreparedStatement pstmt,Object[] params)
	{
		
		try{
			int index=1;			
		for(int i=0;i<pstmt.getParameterMetaData().getParameterCount();i++)
		{
			
		/*	if(params[i].equals(Long.class)){
				pstmt.setLong(index, (Long)params[i]);
			}else if(params[i].equals(Integer.class)){
				pstmt.setInt(index, (Integer)params[i]);
			}else if(params[i].equals(Float.class)){
				pstmt.setFloat(index, (Float)params[i]);
			}else if(params[i].equals(String.class)){
				pstmt.setString(index, (String)params[i]);
			}else{
				pstmt.setObject(index,params[i]);
			}
			index++;*/
			if(params[i] instanceof Long){
				pstmt.setLong(index, (Long)params[i]);
			}else if(params[i] instanceof Integer){
				pstmt.setInt(index, (Integer)params[i]);
			}else if(params[i] instanceof Float){
				pstmt.setFloat(index, (Float)params[i]);
			}else if(params[i] instanceof String){
				pstmt.setString(index, (String)params[i]);	
				
			}else{
				pstmt.setObject(index,params[i]);
			}
			index++;
			
		}
		}catch(Exception e)	{
			e.printStackTrace();
			}
			return pstmt;
	}
	
	public static QueryData execuateQuery(String query,Object[] params)
	{
		
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		QueryData data=new QueryData();
		try{
			con=DBUtil.getConnection();
			String queryStr=query;
			pstmt=con.prepareStatement(queryStr);
			if(params!=null)
			pstmt=mapParams(pstmt,params);
			System.out.println(pstmt.toString());
			if(queryStr!=null && !queryStr.isEmpty())
			{
				String lowerCaseQuery=queryStr.trim().toLowerCase();
				if(lowerCaseQuery.startsWith("insert") ||lowerCaseQuery.startsWith("update") || lowerCaseQuery.startsWith("delete"))
				{
					pstmt.executeUpdate();
					return null;
				}
			}
			
			rs=pstmt.executeQuery();
			ResultSetMetaData rsmd = rs.getMetaData();
			int columnCount = rs.getMetaData().getColumnCount();
			for (int i=1; i<columnCount+1; i++) {
		       data.addColumn( rsmd.getColumnLabel(i));
		    }
			while(rs.next())
			{
				QueryData.Row row = data.new Row();
				for (int i=1; i<columnCount+1; i++) {
					row.add(rs.getString(i));
				}
				data.addRow(row);
				
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			DBUtil.closeResource(con, pstmt,rs);
			
		}
		return data;
	}
	
}



